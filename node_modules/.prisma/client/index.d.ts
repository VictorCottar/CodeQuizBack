
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model HTMLQuestions
 * 
 */
export type HTMLQuestions = $Result.DefaultSelection<Prisma.$HTMLQuestionsPayload>
/**
 * Model CSSQuestions
 * 
 */
export type CSSQuestions = $Result.DefaultSelection<Prisma.$CSSQuestionsPayload>
/**
 * Model JSQuestions
 * 
 */
export type JSQuestions = $Result.DefaultSelection<Prisma.$JSQuestionsPayload>
/**
 * Model JavaQuestions
 * 
 */
export type JavaQuestions = $Result.DefaultSelection<Prisma.$JavaQuestionsPayload>
/**
 * Model PythonQuestions
 * 
 */
export type PythonQuestions = $Result.DefaultSelection<Prisma.$PythonQuestionsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.hTMLQuestions`: Exposes CRUD operations for the **HTMLQuestions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HTMLQuestions
    * const hTMLQuestions = await prisma.hTMLQuestions.findMany()
    * ```
    */
  get hTMLQuestions(): Prisma.HTMLQuestionsDelegate<ExtArgs>;

  /**
   * `prisma.cSSQuestions`: Exposes CRUD operations for the **CSSQuestions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CSSQuestions
    * const cSSQuestions = await prisma.cSSQuestions.findMany()
    * ```
    */
  get cSSQuestions(): Prisma.CSSQuestionsDelegate<ExtArgs>;

  /**
   * `prisma.jSQuestions`: Exposes CRUD operations for the **JSQuestions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JSQuestions
    * const jSQuestions = await prisma.jSQuestions.findMany()
    * ```
    */
  get jSQuestions(): Prisma.JSQuestionsDelegate<ExtArgs>;

  /**
   * `prisma.javaQuestions`: Exposes CRUD operations for the **JavaQuestions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JavaQuestions
    * const javaQuestions = await prisma.javaQuestions.findMany()
    * ```
    */
  get javaQuestions(): Prisma.JavaQuestionsDelegate<ExtArgs>;

  /**
   * `prisma.pythonQuestions`: Exposes CRUD operations for the **PythonQuestions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PythonQuestions
    * const pythonQuestions = await prisma.pythonQuestions.findMany()
    * ```
    */
  get pythonQuestions(): Prisma.PythonQuestionsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    HTMLQuestions: 'HTMLQuestions',
    CSSQuestions: 'CSSQuestions',
    JSQuestions: 'JSQuestions',
    JavaQuestions: 'JavaQuestions',
    PythonQuestions: 'PythonQuestions'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "hTMLQuestions" | "cSSQuestions" | "jSQuestions" | "javaQuestions" | "pythonQuestions"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      HTMLQuestions: {
        payload: Prisma.$HTMLQuestionsPayload<ExtArgs>
        fields: Prisma.HTMLQuestionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HTMLQuestionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HTMLQuestionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HTMLQuestionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HTMLQuestionsPayload>
          }
          findFirst: {
            args: Prisma.HTMLQuestionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HTMLQuestionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HTMLQuestionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HTMLQuestionsPayload>
          }
          findMany: {
            args: Prisma.HTMLQuestionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HTMLQuestionsPayload>[]
          }
          create: {
            args: Prisma.HTMLQuestionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HTMLQuestionsPayload>
          }
          createMany: {
            args: Prisma.HTMLQuestionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HTMLQuestionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HTMLQuestionsPayload>[]
          }
          delete: {
            args: Prisma.HTMLQuestionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HTMLQuestionsPayload>
          }
          update: {
            args: Prisma.HTMLQuestionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HTMLQuestionsPayload>
          }
          deleteMany: {
            args: Prisma.HTMLQuestionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HTMLQuestionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HTMLQuestionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HTMLQuestionsPayload>
          }
          aggregate: {
            args: Prisma.HTMLQuestionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHTMLQuestions>
          }
          groupBy: {
            args: Prisma.HTMLQuestionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<HTMLQuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.HTMLQuestionsCountArgs<ExtArgs>
            result: $Utils.Optional<HTMLQuestionsCountAggregateOutputType> | number
          }
        }
      }
      CSSQuestions: {
        payload: Prisma.$CSSQuestionsPayload<ExtArgs>
        fields: Prisma.CSSQuestionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CSSQuestionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSSQuestionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CSSQuestionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSSQuestionsPayload>
          }
          findFirst: {
            args: Prisma.CSSQuestionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSSQuestionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CSSQuestionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSSQuestionsPayload>
          }
          findMany: {
            args: Prisma.CSSQuestionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSSQuestionsPayload>[]
          }
          create: {
            args: Prisma.CSSQuestionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSSQuestionsPayload>
          }
          createMany: {
            args: Prisma.CSSQuestionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CSSQuestionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSSQuestionsPayload>[]
          }
          delete: {
            args: Prisma.CSSQuestionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSSQuestionsPayload>
          }
          update: {
            args: Prisma.CSSQuestionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSSQuestionsPayload>
          }
          deleteMany: {
            args: Prisma.CSSQuestionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CSSQuestionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CSSQuestionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CSSQuestionsPayload>
          }
          aggregate: {
            args: Prisma.CSSQuestionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCSSQuestions>
          }
          groupBy: {
            args: Prisma.CSSQuestionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CSSQuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CSSQuestionsCountArgs<ExtArgs>
            result: $Utils.Optional<CSSQuestionsCountAggregateOutputType> | number
          }
        }
      }
      JSQuestions: {
        payload: Prisma.$JSQuestionsPayload<ExtArgs>
        fields: Prisma.JSQuestionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JSQuestionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JSQuestionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JSQuestionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JSQuestionsPayload>
          }
          findFirst: {
            args: Prisma.JSQuestionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JSQuestionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JSQuestionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JSQuestionsPayload>
          }
          findMany: {
            args: Prisma.JSQuestionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JSQuestionsPayload>[]
          }
          create: {
            args: Prisma.JSQuestionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JSQuestionsPayload>
          }
          createMany: {
            args: Prisma.JSQuestionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JSQuestionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JSQuestionsPayload>[]
          }
          delete: {
            args: Prisma.JSQuestionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JSQuestionsPayload>
          }
          update: {
            args: Prisma.JSQuestionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JSQuestionsPayload>
          }
          deleteMany: {
            args: Prisma.JSQuestionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JSQuestionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JSQuestionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JSQuestionsPayload>
          }
          aggregate: {
            args: Prisma.JSQuestionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJSQuestions>
          }
          groupBy: {
            args: Prisma.JSQuestionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<JSQuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.JSQuestionsCountArgs<ExtArgs>
            result: $Utils.Optional<JSQuestionsCountAggregateOutputType> | number
          }
        }
      }
      JavaQuestions: {
        payload: Prisma.$JavaQuestionsPayload<ExtArgs>
        fields: Prisma.JavaQuestionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JavaQuestionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JavaQuestionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JavaQuestionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JavaQuestionsPayload>
          }
          findFirst: {
            args: Prisma.JavaQuestionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JavaQuestionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JavaQuestionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JavaQuestionsPayload>
          }
          findMany: {
            args: Prisma.JavaQuestionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JavaQuestionsPayload>[]
          }
          create: {
            args: Prisma.JavaQuestionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JavaQuestionsPayload>
          }
          createMany: {
            args: Prisma.JavaQuestionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JavaQuestionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JavaQuestionsPayload>[]
          }
          delete: {
            args: Prisma.JavaQuestionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JavaQuestionsPayload>
          }
          update: {
            args: Prisma.JavaQuestionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JavaQuestionsPayload>
          }
          deleteMany: {
            args: Prisma.JavaQuestionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JavaQuestionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JavaQuestionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JavaQuestionsPayload>
          }
          aggregate: {
            args: Prisma.JavaQuestionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJavaQuestions>
          }
          groupBy: {
            args: Prisma.JavaQuestionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<JavaQuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.JavaQuestionsCountArgs<ExtArgs>
            result: $Utils.Optional<JavaQuestionsCountAggregateOutputType> | number
          }
        }
      }
      PythonQuestions: {
        payload: Prisma.$PythonQuestionsPayload<ExtArgs>
        fields: Prisma.PythonQuestionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PythonQuestionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PythonQuestionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PythonQuestionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PythonQuestionsPayload>
          }
          findFirst: {
            args: Prisma.PythonQuestionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PythonQuestionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PythonQuestionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PythonQuestionsPayload>
          }
          findMany: {
            args: Prisma.PythonQuestionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PythonQuestionsPayload>[]
          }
          create: {
            args: Prisma.PythonQuestionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PythonQuestionsPayload>
          }
          createMany: {
            args: Prisma.PythonQuestionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PythonQuestionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PythonQuestionsPayload>[]
          }
          delete: {
            args: Prisma.PythonQuestionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PythonQuestionsPayload>
          }
          update: {
            args: Prisma.PythonQuestionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PythonQuestionsPayload>
          }
          deleteMany: {
            args: Prisma.PythonQuestionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PythonQuestionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PythonQuestionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PythonQuestionsPayload>
          }
          aggregate: {
            args: Prisma.PythonQuestionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePythonQuestions>
          }
          groupBy: {
            args: Prisma.PythonQuestionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PythonQuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PythonQuestionsCountArgs<ExtArgs>
            result: $Utils.Optional<PythonQuestionsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Model HTMLQuestions
   */

  export type AggregateHTMLQuestions = {
    _count: HTMLQuestionsCountAggregateOutputType | null
    _avg: HTMLQuestionsAvgAggregateOutputType | null
    _sum: HTMLQuestionsSumAggregateOutputType | null
    _min: HTMLQuestionsMinAggregateOutputType | null
    _max: HTMLQuestionsMaxAggregateOutputType | null
  }

  export type HTMLQuestionsAvgAggregateOutputType = {
    id: number | null
  }

  export type HTMLQuestionsSumAggregateOutputType = {
    id: number | null
  }

  export type HTMLQuestionsMinAggregateOutputType = {
    id: number | null
    question: string | null
    option1: string | null
    option2: string | null
    option3: string | null
    correct_answer: string | null
  }

  export type HTMLQuestionsMaxAggregateOutputType = {
    id: number | null
    question: string | null
    option1: string | null
    option2: string | null
    option3: string | null
    correct_answer: string | null
  }

  export type HTMLQuestionsCountAggregateOutputType = {
    id: number
    question: number
    option1: number
    option2: number
    option3: number
    correct_answer: number
    _all: number
  }


  export type HTMLQuestionsAvgAggregateInputType = {
    id?: true
  }

  export type HTMLQuestionsSumAggregateInputType = {
    id?: true
  }

  export type HTMLQuestionsMinAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
  }

  export type HTMLQuestionsMaxAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
  }

  export type HTMLQuestionsCountAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
    _all?: true
  }

  export type HTMLQuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HTMLQuestions to aggregate.
     */
    where?: HTMLQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HTMLQuestions to fetch.
     */
    orderBy?: HTMLQuestionsOrderByWithRelationInput | HTMLQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HTMLQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HTMLQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HTMLQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HTMLQuestions
    **/
    _count?: true | HTMLQuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HTMLQuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HTMLQuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HTMLQuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HTMLQuestionsMaxAggregateInputType
  }

  export type GetHTMLQuestionsAggregateType<T extends HTMLQuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateHTMLQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHTMLQuestions[P]>
      : GetScalarType<T[P], AggregateHTMLQuestions[P]>
  }




  export type HTMLQuestionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HTMLQuestionsWhereInput
    orderBy?: HTMLQuestionsOrderByWithAggregationInput | HTMLQuestionsOrderByWithAggregationInput[]
    by: HTMLQuestionsScalarFieldEnum[] | HTMLQuestionsScalarFieldEnum
    having?: HTMLQuestionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HTMLQuestionsCountAggregateInputType | true
    _avg?: HTMLQuestionsAvgAggregateInputType
    _sum?: HTMLQuestionsSumAggregateInputType
    _min?: HTMLQuestionsMinAggregateInputType
    _max?: HTMLQuestionsMaxAggregateInputType
  }

  export type HTMLQuestionsGroupByOutputType = {
    id: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
    _count: HTMLQuestionsCountAggregateOutputType | null
    _avg: HTMLQuestionsAvgAggregateOutputType | null
    _sum: HTMLQuestionsSumAggregateOutputType | null
    _min: HTMLQuestionsMinAggregateOutputType | null
    _max: HTMLQuestionsMaxAggregateOutputType | null
  }

  type GetHTMLQuestionsGroupByPayload<T extends HTMLQuestionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HTMLQuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HTMLQuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HTMLQuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], HTMLQuestionsGroupByOutputType[P]>
        }
      >
    >


  export type HTMLQuestionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }, ExtArgs["result"]["hTMLQuestions"]>

  export type HTMLQuestionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }, ExtArgs["result"]["hTMLQuestions"]>

  export type HTMLQuestionsSelectScalar = {
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }


  export type $HTMLQuestionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HTMLQuestions"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question: string
      option1: string
      option2: string
      option3: string
      correct_answer: string
    }, ExtArgs["result"]["hTMLQuestions"]>
    composites: {}
  }

  type HTMLQuestionsGetPayload<S extends boolean | null | undefined | HTMLQuestionsDefaultArgs> = $Result.GetResult<Prisma.$HTMLQuestionsPayload, S>

  type HTMLQuestionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HTMLQuestionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HTMLQuestionsCountAggregateInputType | true
    }

  export interface HTMLQuestionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HTMLQuestions'], meta: { name: 'HTMLQuestions' } }
    /**
     * Find zero or one HTMLQuestions that matches the filter.
     * @param {HTMLQuestionsFindUniqueArgs} args - Arguments to find a HTMLQuestions
     * @example
     * // Get one HTMLQuestions
     * const hTMLQuestions = await prisma.hTMLQuestions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HTMLQuestionsFindUniqueArgs>(args: SelectSubset<T, HTMLQuestionsFindUniqueArgs<ExtArgs>>): Prisma__HTMLQuestionsClient<$Result.GetResult<Prisma.$HTMLQuestionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HTMLQuestions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HTMLQuestionsFindUniqueOrThrowArgs} args - Arguments to find a HTMLQuestions
     * @example
     * // Get one HTMLQuestions
     * const hTMLQuestions = await prisma.hTMLQuestions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HTMLQuestionsFindUniqueOrThrowArgs>(args: SelectSubset<T, HTMLQuestionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HTMLQuestionsClient<$Result.GetResult<Prisma.$HTMLQuestionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HTMLQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HTMLQuestionsFindFirstArgs} args - Arguments to find a HTMLQuestions
     * @example
     * // Get one HTMLQuestions
     * const hTMLQuestions = await prisma.hTMLQuestions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HTMLQuestionsFindFirstArgs>(args?: SelectSubset<T, HTMLQuestionsFindFirstArgs<ExtArgs>>): Prisma__HTMLQuestionsClient<$Result.GetResult<Prisma.$HTMLQuestionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HTMLQuestions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HTMLQuestionsFindFirstOrThrowArgs} args - Arguments to find a HTMLQuestions
     * @example
     * // Get one HTMLQuestions
     * const hTMLQuestions = await prisma.hTMLQuestions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HTMLQuestionsFindFirstOrThrowArgs>(args?: SelectSubset<T, HTMLQuestionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__HTMLQuestionsClient<$Result.GetResult<Prisma.$HTMLQuestionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HTMLQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HTMLQuestionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HTMLQuestions
     * const hTMLQuestions = await prisma.hTMLQuestions.findMany()
     * 
     * // Get first 10 HTMLQuestions
     * const hTMLQuestions = await prisma.hTMLQuestions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hTMLQuestionsWithIdOnly = await prisma.hTMLQuestions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HTMLQuestionsFindManyArgs>(args?: SelectSubset<T, HTMLQuestionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HTMLQuestionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HTMLQuestions.
     * @param {HTMLQuestionsCreateArgs} args - Arguments to create a HTMLQuestions.
     * @example
     * // Create one HTMLQuestions
     * const HTMLQuestions = await prisma.hTMLQuestions.create({
     *   data: {
     *     // ... data to create a HTMLQuestions
     *   }
     * })
     * 
     */
    create<T extends HTMLQuestionsCreateArgs>(args: SelectSubset<T, HTMLQuestionsCreateArgs<ExtArgs>>): Prisma__HTMLQuestionsClient<$Result.GetResult<Prisma.$HTMLQuestionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HTMLQuestions.
     * @param {HTMLQuestionsCreateManyArgs} args - Arguments to create many HTMLQuestions.
     * @example
     * // Create many HTMLQuestions
     * const hTMLQuestions = await prisma.hTMLQuestions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HTMLQuestionsCreateManyArgs>(args?: SelectSubset<T, HTMLQuestionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HTMLQuestions and returns the data saved in the database.
     * @param {HTMLQuestionsCreateManyAndReturnArgs} args - Arguments to create many HTMLQuestions.
     * @example
     * // Create many HTMLQuestions
     * const hTMLQuestions = await prisma.hTMLQuestions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HTMLQuestions and only return the `id`
     * const hTMLQuestionsWithIdOnly = await prisma.hTMLQuestions.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HTMLQuestionsCreateManyAndReturnArgs>(args?: SelectSubset<T, HTMLQuestionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HTMLQuestionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HTMLQuestions.
     * @param {HTMLQuestionsDeleteArgs} args - Arguments to delete one HTMLQuestions.
     * @example
     * // Delete one HTMLQuestions
     * const HTMLQuestions = await prisma.hTMLQuestions.delete({
     *   where: {
     *     // ... filter to delete one HTMLQuestions
     *   }
     * })
     * 
     */
    delete<T extends HTMLQuestionsDeleteArgs>(args: SelectSubset<T, HTMLQuestionsDeleteArgs<ExtArgs>>): Prisma__HTMLQuestionsClient<$Result.GetResult<Prisma.$HTMLQuestionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HTMLQuestions.
     * @param {HTMLQuestionsUpdateArgs} args - Arguments to update one HTMLQuestions.
     * @example
     * // Update one HTMLQuestions
     * const hTMLQuestions = await prisma.hTMLQuestions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HTMLQuestionsUpdateArgs>(args: SelectSubset<T, HTMLQuestionsUpdateArgs<ExtArgs>>): Prisma__HTMLQuestionsClient<$Result.GetResult<Prisma.$HTMLQuestionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HTMLQuestions.
     * @param {HTMLQuestionsDeleteManyArgs} args - Arguments to filter HTMLQuestions to delete.
     * @example
     * // Delete a few HTMLQuestions
     * const { count } = await prisma.hTMLQuestions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HTMLQuestionsDeleteManyArgs>(args?: SelectSubset<T, HTMLQuestionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HTMLQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HTMLQuestionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HTMLQuestions
     * const hTMLQuestions = await prisma.hTMLQuestions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HTMLQuestionsUpdateManyArgs>(args: SelectSubset<T, HTMLQuestionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HTMLQuestions.
     * @param {HTMLQuestionsUpsertArgs} args - Arguments to update or create a HTMLQuestions.
     * @example
     * // Update or create a HTMLQuestions
     * const hTMLQuestions = await prisma.hTMLQuestions.upsert({
     *   create: {
     *     // ... data to create a HTMLQuestions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HTMLQuestions we want to update
     *   }
     * })
     */
    upsert<T extends HTMLQuestionsUpsertArgs>(args: SelectSubset<T, HTMLQuestionsUpsertArgs<ExtArgs>>): Prisma__HTMLQuestionsClient<$Result.GetResult<Prisma.$HTMLQuestionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HTMLQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HTMLQuestionsCountArgs} args - Arguments to filter HTMLQuestions to count.
     * @example
     * // Count the number of HTMLQuestions
     * const count = await prisma.hTMLQuestions.count({
     *   where: {
     *     // ... the filter for the HTMLQuestions we want to count
     *   }
     * })
    **/
    count<T extends HTMLQuestionsCountArgs>(
      args?: Subset<T, HTMLQuestionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HTMLQuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HTMLQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HTMLQuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HTMLQuestionsAggregateArgs>(args: Subset<T, HTMLQuestionsAggregateArgs>): Prisma.PrismaPromise<GetHTMLQuestionsAggregateType<T>>

    /**
     * Group by HTMLQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HTMLQuestionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HTMLQuestionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HTMLQuestionsGroupByArgs['orderBy'] }
        : { orderBy?: HTMLQuestionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HTMLQuestionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHTMLQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HTMLQuestions model
   */
  readonly fields: HTMLQuestionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HTMLQuestions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HTMLQuestionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HTMLQuestions model
   */ 
  interface HTMLQuestionsFieldRefs {
    readonly id: FieldRef<"HTMLQuestions", 'Int'>
    readonly question: FieldRef<"HTMLQuestions", 'String'>
    readonly option1: FieldRef<"HTMLQuestions", 'String'>
    readonly option2: FieldRef<"HTMLQuestions", 'String'>
    readonly option3: FieldRef<"HTMLQuestions", 'String'>
    readonly correct_answer: FieldRef<"HTMLQuestions", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HTMLQuestions findUnique
   */
  export type HTMLQuestionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HTMLQuestions
     */
    select?: HTMLQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which HTMLQuestions to fetch.
     */
    where: HTMLQuestionsWhereUniqueInput
  }

  /**
   * HTMLQuestions findUniqueOrThrow
   */
  export type HTMLQuestionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HTMLQuestions
     */
    select?: HTMLQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which HTMLQuestions to fetch.
     */
    where: HTMLQuestionsWhereUniqueInput
  }

  /**
   * HTMLQuestions findFirst
   */
  export type HTMLQuestionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HTMLQuestions
     */
    select?: HTMLQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which HTMLQuestions to fetch.
     */
    where?: HTMLQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HTMLQuestions to fetch.
     */
    orderBy?: HTMLQuestionsOrderByWithRelationInput | HTMLQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HTMLQuestions.
     */
    cursor?: HTMLQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HTMLQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HTMLQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HTMLQuestions.
     */
    distinct?: HTMLQuestionsScalarFieldEnum | HTMLQuestionsScalarFieldEnum[]
  }

  /**
   * HTMLQuestions findFirstOrThrow
   */
  export type HTMLQuestionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HTMLQuestions
     */
    select?: HTMLQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which HTMLQuestions to fetch.
     */
    where?: HTMLQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HTMLQuestions to fetch.
     */
    orderBy?: HTMLQuestionsOrderByWithRelationInput | HTMLQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HTMLQuestions.
     */
    cursor?: HTMLQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HTMLQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HTMLQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HTMLQuestions.
     */
    distinct?: HTMLQuestionsScalarFieldEnum | HTMLQuestionsScalarFieldEnum[]
  }

  /**
   * HTMLQuestions findMany
   */
  export type HTMLQuestionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HTMLQuestions
     */
    select?: HTMLQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which HTMLQuestions to fetch.
     */
    where?: HTMLQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HTMLQuestions to fetch.
     */
    orderBy?: HTMLQuestionsOrderByWithRelationInput | HTMLQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HTMLQuestions.
     */
    cursor?: HTMLQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HTMLQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HTMLQuestions.
     */
    skip?: number
    distinct?: HTMLQuestionsScalarFieldEnum | HTMLQuestionsScalarFieldEnum[]
  }

  /**
   * HTMLQuestions create
   */
  export type HTMLQuestionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HTMLQuestions
     */
    select?: HTMLQuestionsSelect<ExtArgs> | null
    /**
     * The data needed to create a HTMLQuestions.
     */
    data: XOR<HTMLQuestionsCreateInput, HTMLQuestionsUncheckedCreateInput>
  }

  /**
   * HTMLQuestions createMany
   */
  export type HTMLQuestionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HTMLQuestions.
     */
    data: HTMLQuestionsCreateManyInput | HTMLQuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HTMLQuestions createManyAndReturn
   */
  export type HTMLQuestionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HTMLQuestions
     */
    select?: HTMLQuestionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HTMLQuestions.
     */
    data: HTMLQuestionsCreateManyInput | HTMLQuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HTMLQuestions update
   */
  export type HTMLQuestionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HTMLQuestions
     */
    select?: HTMLQuestionsSelect<ExtArgs> | null
    /**
     * The data needed to update a HTMLQuestions.
     */
    data: XOR<HTMLQuestionsUpdateInput, HTMLQuestionsUncheckedUpdateInput>
    /**
     * Choose, which HTMLQuestions to update.
     */
    where: HTMLQuestionsWhereUniqueInput
  }

  /**
   * HTMLQuestions updateMany
   */
  export type HTMLQuestionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HTMLQuestions.
     */
    data: XOR<HTMLQuestionsUpdateManyMutationInput, HTMLQuestionsUncheckedUpdateManyInput>
    /**
     * Filter which HTMLQuestions to update
     */
    where?: HTMLQuestionsWhereInput
  }

  /**
   * HTMLQuestions upsert
   */
  export type HTMLQuestionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HTMLQuestions
     */
    select?: HTMLQuestionsSelect<ExtArgs> | null
    /**
     * The filter to search for the HTMLQuestions to update in case it exists.
     */
    where: HTMLQuestionsWhereUniqueInput
    /**
     * In case the HTMLQuestions found by the `where` argument doesn't exist, create a new HTMLQuestions with this data.
     */
    create: XOR<HTMLQuestionsCreateInput, HTMLQuestionsUncheckedCreateInput>
    /**
     * In case the HTMLQuestions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HTMLQuestionsUpdateInput, HTMLQuestionsUncheckedUpdateInput>
  }

  /**
   * HTMLQuestions delete
   */
  export type HTMLQuestionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HTMLQuestions
     */
    select?: HTMLQuestionsSelect<ExtArgs> | null
    /**
     * Filter which HTMLQuestions to delete.
     */
    where: HTMLQuestionsWhereUniqueInput
  }

  /**
   * HTMLQuestions deleteMany
   */
  export type HTMLQuestionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HTMLQuestions to delete
     */
    where?: HTMLQuestionsWhereInput
  }

  /**
   * HTMLQuestions without action
   */
  export type HTMLQuestionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HTMLQuestions
     */
    select?: HTMLQuestionsSelect<ExtArgs> | null
  }


  /**
   * Model CSSQuestions
   */

  export type AggregateCSSQuestions = {
    _count: CSSQuestionsCountAggregateOutputType | null
    _avg: CSSQuestionsAvgAggregateOutputType | null
    _sum: CSSQuestionsSumAggregateOutputType | null
    _min: CSSQuestionsMinAggregateOutputType | null
    _max: CSSQuestionsMaxAggregateOutputType | null
  }

  export type CSSQuestionsAvgAggregateOutputType = {
    id: number | null
  }

  export type CSSQuestionsSumAggregateOutputType = {
    id: number | null
  }

  export type CSSQuestionsMinAggregateOutputType = {
    id: number | null
    question: string | null
    option1: string | null
    option2: string | null
    option3: string | null
    correct_answer: string | null
  }

  export type CSSQuestionsMaxAggregateOutputType = {
    id: number | null
    question: string | null
    option1: string | null
    option2: string | null
    option3: string | null
    correct_answer: string | null
  }

  export type CSSQuestionsCountAggregateOutputType = {
    id: number
    question: number
    option1: number
    option2: number
    option3: number
    correct_answer: number
    _all: number
  }


  export type CSSQuestionsAvgAggregateInputType = {
    id?: true
  }

  export type CSSQuestionsSumAggregateInputType = {
    id?: true
  }

  export type CSSQuestionsMinAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
  }

  export type CSSQuestionsMaxAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
  }

  export type CSSQuestionsCountAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
    _all?: true
  }

  export type CSSQuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CSSQuestions to aggregate.
     */
    where?: CSSQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CSSQuestions to fetch.
     */
    orderBy?: CSSQuestionsOrderByWithRelationInput | CSSQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CSSQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CSSQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CSSQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CSSQuestions
    **/
    _count?: true | CSSQuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CSSQuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CSSQuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CSSQuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CSSQuestionsMaxAggregateInputType
  }

  export type GetCSSQuestionsAggregateType<T extends CSSQuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateCSSQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCSSQuestions[P]>
      : GetScalarType<T[P], AggregateCSSQuestions[P]>
  }




  export type CSSQuestionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CSSQuestionsWhereInput
    orderBy?: CSSQuestionsOrderByWithAggregationInput | CSSQuestionsOrderByWithAggregationInput[]
    by: CSSQuestionsScalarFieldEnum[] | CSSQuestionsScalarFieldEnum
    having?: CSSQuestionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CSSQuestionsCountAggregateInputType | true
    _avg?: CSSQuestionsAvgAggregateInputType
    _sum?: CSSQuestionsSumAggregateInputType
    _min?: CSSQuestionsMinAggregateInputType
    _max?: CSSQuestionsMaxAggregateInputType
  }

  export type CSSQuestionsGroupByOutputType = {
    id: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
    _count: CSSQuestionsCountAggregateOutputType | null
    _avg: CSSQuestionsAvgAggregateOutputType | null
    _sum: CSSQuestionsSumAggregateOutputType | null
    _min: CSSQuestionsMinAggregateOutputType | null
    _max: CSSQuestionsMaxAggregateOutputType | null
  }

  type GetCSSQuestionsGroupByPayload<T extends CSSQuestionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CSSQuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CSSQuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CSSQuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], CSSQuestionsGroupByOutputType[P]>
        }
      >
    >


  export type CSSQuestionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }, ExtArgs["result"]["cSSQuestions"]>

  export type CSSQuestionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }, ExtArgs["result"]["cSSQuestions"]>

  export type CSSQuestionsSelectScalar = {
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }


  export type $CSSQuestionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CSSQuestions"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question: string
      option1: string
      option2: string
      option3: string
      correct_answer: string
    }, ExtArgs["result"]["cSSQuestions"]>
    composites: {}
  }

  type CSSQuestionsGetPayload<S extends boolean | null | undefined | CSSQuestionsDefaultArgs> = $Result.GetResult<Prisma.$CSSQuestionsPayload, S>

  type CSSQuestionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CSSQuestionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CSSQuestionsCountAggregateInputType | true
    }

  export interface CSSQuestionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CSSQuestions'], meta: { name: 'CSSQuestions' } }
    /**
     * Find zero or one CSSQuestions that matches the filter.
     * @param {CSSQuestionsFindUniqueArgs} args - Arguments to find a CSSQuestions
     * @example
     * // Get one CSSQuestions
     * const cSSQuestions = await prisma.cSSQuestions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CSSQuestionsFindUniqueArgs>(args: SelectSubset<T, CSSQuestionsFindUniqueArgs<ExtArgs>>): Prisma__CSSQuestionsClient<$Result.GetResult<Prisma.$CSSQuestionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CSSQuestions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CSSQuestionsFindUniqueOrThrowArgs} args - Arguments to find a CSSQuestions
     * @example
     * // Get one CSSQuestions
     * const cSSQuestions = await prisma.cSSQuestions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CSSQuestionsFindUniqueOrThrowArgs>(args: SelectSubset<T, CSSQuestionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CSSQuestionsClient<$Result.GetResult<Prisma.$CSSQuestionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CSSQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSSQuestionsFindFirstArgs} args - Arguments to find a CSSQuestions
     * @example
     * // Get one CSSQuestions
     * const cSSQuestions = await prisma.cSSQuestions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CSSQuestionsFindFirstArgs>(args?: SelectSubset<T, CSSQuestionsFindFirstArgs<ExtArgs>>): Prisma__CSSQuestionsClient<$Result.GetResult<Prisma.$CSSQuestionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CSSQuestions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSSQuestionsFindFirstOrThrowArgs} args - Arguments to find a CSSQuestions
     * @example
     * // Get one CSSQuestions
     * const cSSQuestions = await prisma.cSSQuestions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CSSQuestionsFindFirstOrThrowArgs>(args?: SelectSubset<T, CSSQuestionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__CSSQuestionsClient<$Result.GetResult<Prisma.$CSSQuestionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CSSQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSSQuestionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CSSQuestions
     * const cSSQuestions = await prisma.cSSQuestions.findMany()
     * 
     * // Get first 10 CSSQuestions
     * const cSSQuestions = await prisma.cSSQuestions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cSSQuestionsWithIdOnly = await prisma.cSSQuestions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CSSQuestionsFindManyArgs>(args?: SelectSubset<T, CSSQuestionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CSSQuestionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CSSQuestions.
     * @param {CSSQuestionsCreateArgs} args - Arguments to create a CSSQuestions.
     * @example
     * // Create one CSSQuestions
     * const CSSQuestions = await prisma.cSSQuestions.create({
     *   data: {
     *     // ... data to create a CSSQuestions
     *   }
     * })
     * 
     */
    create<T extends CSSQuestionsCreateArgs>(args: SelectSubset<T, CSSQuestionsCreateArgs<ExtArgs>>): Prisma__CSSQuestionsClient<$Result.GetResult<Prisma.$CSSQuestionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CSSQuestions.
     * @param {CSSQuestionsCreateManyArgs} args - Arguments to create many CSSQuestions.
     * @example
     * // Create many CSSQuestions
     * const cSSQuestions = await prisma.cSSQuestions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CSSQuestionsCreateManyArgs>(args?: SelectSubset<T, CSSQuestionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CSSQuestions and returns the data saved in the database.
     * @param {CSSQuestionsCreateManyAndReturnArgs} args - Arguments to create many CSSQuestions.
     * @example
     * // Create many CSSQuestions
     * const cSSQuestions = await prisma.cSSQuestions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CSSQuestions and only return the `id`
     * const cSSQuestionsWithIdOnly = await prisma.cSSQuestions.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CSSQuestionsCreateManyAndReturnArgs>(args?: SelectSubset<T, CSSQuestionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CSSQuestionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CSSQuestions.
     * @param {CSSQuestionsDeleteArgs} args - Arguments to delete one CSSQuestions.
     * @example
     * // Delete one CSSQuestions
     * const CSSQuestions = await prisma.cSSQuestions.delete({
     *   where: {
     *     // ... filter to delete one CSSQuestions
     *   }
     * })
     * 
     */
    delete<T extends CSSQuestionsDeleteArgs>(args: SelectSubset<T, CSSQuestionsDeleteArgs<ExtArgs>>): Prisma__CSSQuestionsClient<$Result.GetResult<Prisma.$CSSQuestionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CSSQuestions.
     * @param {CSSQuestionsUpdateArgs} args - Arguments to update one CSSQuestions.
     * @example
     * // Update one CSSQuestions
     * const cSSQuestions = await prisma.cSSQuestions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CSSQuestionsUpdateArgs>(args: SelectSubset<T, CSSQuestionsUpdateArgs<ExtArgs>>): Prisma__CSSQuestionsClient<$Result.GetResult<Prisma.$CSSQuestionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CSSQuestions.
     * @param {CSSQuestionsDeleteManyArgs} args - Arguments to filter CSSQuestions to delete.
     * @example
     * // Delete a few CSSQuestions
     * const { count } = await prisma.cSSQuestions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CSSQuestionsDeleteManyArgs>(args?: SelectSubset<T, CSSQuestionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CSSQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSSQuestionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CSSQuestions
     * const cSSQuestions = await prisma.cSSQuestions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CSSQuestionsUpdateManyArgs>(args: SelectSubset<T, CSSQuestionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CSSQuestions.
     * @param {CSSQuestionsUpsertArgs} args - Arguments to update or create a CSSQuestions.
     * @example
     * // Update or create a CSSQuestions
     * const cSSQuestions = await prisma.cSSQuestions.upsert({
     *   create: {
     *     // ... data to create a CSSQuestions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CSSQuestions we want to update
     *   }
     * })
     */
    upsert<T extends CSSQuestionsUpsertArgs>(args: SelectSubset<T, CSSQuestionsUpsertArgs<ExtArgs>>): Prisma__CSSQuestionsClient<$Result.GetResult<Prisma.$CSSQuestionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CSSQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSSQuestionsCountArgs} args - Arguments to filter CSSQuestions to count.
     * @example
     * // Count the number of CSSQuestions
     * const count = await prisma.cSSQuestions.count({
     *   where: {
     *     // ... the filter for the CSSQuestions we want to count
     *   }
     * })
    **/
    count<T extends CSSQuestionsCountArgs>(
      args?: Subset<T, CSSQuestionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CSSQuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CSSQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSSQuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CSSQuestionsAggregateArgs>(args: Subset<T, CSSQuestionsAggregateArgs>): Prisma.PrismaPromise<GetCSSQuestionsAggregateType<T>>

    /**
     * Group by CSSQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CSSQuestionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CSSQuestionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CSSQuestionsGroupByArgs['orderBy'] }
        : { orderBy?: CSSQuestionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CSSQuestionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCSSQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CSSQuestions model
   */
  readonly fields: CSSQuestionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CSSQuestions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CSSQuestionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CSSQuestions model
   */ 
  interface CSSQuestionsFieldRefs {
    readonly id: FieldRef<"CSSQuestions", 'Int'>
    readonly question: FieldRef<"CSSQuestions", 'String'>
    readonly option1: FieldRef<"CSSQuestions", 'String'>
    readonly option2: FieldRef<"CSSQuestions", 'String'>
    readonly option3: FieldRef<"CSSQuestions", 'String'>
    readonly correct_answer: FieldRef<"CSSQuestions", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CSSQuestions findUnique
   */
  export type CSSQuestionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSSQuestions
     */
    select?: CSSQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which CSSQuestions to fetch.
     */
    where: CSSQuestionsWhereUniqueInput
  }

  /**
   * CSSQuestions findUniqueOrThrow
   */
  export type CSSQuestionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSSQuestions
     */
    select?: CSSQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which CSSQuestions to fetch.
     */
    where: CSSQuestionsWhereUniqueInput
  }

  /**
   * CSSQuestions findFirst
   */
  export type CSSQuestionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSSQuestions
     */
    select?: CSSQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which CSSQuestions to fetch.
     */
    where?: CSSQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CSSQuestions to fetch.
     */
    orderBy?: CSSQuestionsOrderByWithRelationInput | CSSQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CSSQuestions.
     */
    cursor?: CSSQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CSSQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CSSQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CSSQuestions.
     */
    distinct?: CSSQuestionsScalarFieldEnum | CSSQuestionsScalarFieldEnum[]
  }

  /**
   * CSSQuestions findFirstOrThrow
   */
  export type CSSQuestionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSSQuestions
     */
    select?: CSSQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which CSSQuestions to fetch.
     */
    where?: CSSQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CSSQuestions to fetch.
     */
    orderBy?: CSSQuestionsOrderByWithRelationInput | CSSQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CSSQuestions.
     */
    cursor?: CSSQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CSSQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CSSQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CSSQuestions.
     */
    distinct?: CSSQuestionsScalarFieldEnum | CSSQuestionsScalarFieldEnum[]
  }

  /**
   * CSSQuestions findMany
   */
  export type CSSQuestionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSSQuestions
     */
    select?: CSSQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which CSSQuestions to fetch.
     */
    where?: CSSQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CSSQuestions to fetch.
     */
    orderBy?: CSSQuestionsOrderByWithRelationInput | CSSQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CSSQuestions.
     */
    cursor?: CSSQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CSSQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CSSQuestions.
     */
    skip?: number
    distinct?: CSSQuestionsScalarFieldEnum | CSSQuestionsScalarFieldEnum[]
  }

  /**
   * CSSQuestions create
   */
  export type CSSQuestionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSSQuestions
     */
    select?: CSSQuestionsSelect<ExtArgs> | null
    /**
     * The data needed to create a CSSQuestions.
     */
    data: XOR<CSSQuestionsCreateInput, CSSQuestionsUncheckedCreateInput>
  }

  /**
   * CSSQuestions createMany
   */
  export type CSSQuestionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CSSQuestions.
     */
    data: CSSQuestionsCreateManyInput | CSSQuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CSSQuestions createManyAndReturn
   */
  export type CSSQuestionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSSQuestions
     */
    select?: CSSQuestionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CSSQuestions.
     */
    data: CSSQuestionsCreateManyInput | CSSQuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CSSQuestions update
   */
  export type CSSQuestionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSSQuestions
     */
    select?: CSSQuestionsSelect<ExtArgs> | null
    /**
     * The data needed to update a CSSQuestions.
     */
    data: XOR<CSSQuestionsUpdateInput, CSSQuestionsUncheckedUpdateInput>
    /**
     * Choose, which CSSQuestions to update.
     */
    where: CSSQuestionsWhereUniqueInput
  }

  /**
   * CSSQuestions updateMany
   */
  export type CSSQuestionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CSSQuestions.
     */
    data: XOR<CSSQuestionsUpdateManyMutationInput, CSSQuestionsUncheckedUpdateManyInput>
    /**
     * Filter which CSSQuestions to update
     */
    where?: CSSQuestionsWhereInput
  }

  /**
   * CSSQuestions upsert
   */
  export type CSSQuestionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSSQuestions
     */
    select?: CSSQuestionsSelect<ExtArgs> | null
    /**
     * The filter to search for the CSSQuestions to update in case it exists.
     */
    where: CSSQuestionsWhereUniqueInput
    /**
     * In case the CSSQuestions found by the `where` argument doesn't exist, create a new CSSQuestions with this data.
     */
    create: XOR<CSSQuestionsCreateInput, CSSQuestionsUncheckedCreateInput>
    /**
     * In case the CSSQuestions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CSSQuestionsUpdateInput, CSSQuestionsUncheckedUpdateInput>
  }

  /**
   * CSSQuestions delete
   */
  export type CSSQuestionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSSQuestions
     */
    select?: CSSQuestionsSelect<ExtArgs> | null
    /**
     * Filter which CSSQuestions to delete.
     */
    where: CSSQuestionsWhereUniqueInput
  }

  /**
   * CSSQuestions deleteMany
   */
  export type CSSQuestionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CSSQuestions to delete
     */
    where?: CSSQuestionsWhereInput
  }

  /**
   * CSSQuestions without action
   */
  export type CSSQuestionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CSSQuestions
     */
    select?: CSSQuestionsSelect<ExtArgs> | null
  }


  /**
   * Model JSQuestions
   */

  export type AggregateJSQuestions = {
    _count: JSQuestionsCountAggregateOutputType | null
    _avg: JSQuestionsAvgAggregateOutputType | null
    _sum: JSQuestionsSumAggregateOutputType | null
    _min: JSQuestionsMinAggregateOutputType | null
    _max: JSQuestionsMaxAggregateOutputType | null
  }

  export type JSQuestionsAvgAggregateOutputType = {
    id: number | null
  }

  export type JSQuestionsSumAggregateOutputType = {
    id: number | null
  }

  export type JSQuestionsMinAggregateOutputType = {
    id: number | null
    question: string | null
    option1: string | null
    option2: string | null
    option3: string | null
    correct_answer: string | null
  }

  export type JSQuestionsMaxAggregateOutputType = {
    id: number | null
    question: string | null
    option1: string | null
    option2: string | null
    option3: string | null
    correct_answer: string | null
  }

  export type JSQuestionsCountAggregateOutputType = {
    id: number
    question: number
    option1: number
    option2: number
    option3: number
    correct_answer: number
    _all: number
  }


  export type JSQuestionsAvgAggregateInputType = {
    id?: true
  }

  export type JSQuestionsSumAggregateInputType = {
    id?: true
  }

  export type JSQuestionsMinAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
  }

  export type JSQuestionsMaxAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
  }

  export type JSQuestionsCountAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
    _all?: true
  }

  export type JSQuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JSQuestions to aggregate.
     */
    where?: JSQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JSQuestions to fetch.
     */
    orderBy?: JSQuestionsOrderByWithRelationInput | JSQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JSQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JSQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JSQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JSQuestions
    **/
    _count?: true | JSQuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JSQuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JSQuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JSQuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JSQuestionsMaxAggregateInputType
  }

  export type GetJSQuestionsAggregateType<T extends JSQuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateJSQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJSQuestions[P]>
      : GetScalarType<T[P], AggregateJSQuestions[P]>
  }




  export type JSQuestionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JSQuestionsWhereInput
    orderBy?: JSQuestionsOrderByWithAggregationInput | JSQuestionsOrderByWithAggregationInput[]
    by: JSQuestionsScalarFieldEnum[] | JSQuestionsScalarFieldEnum
    having?: JSQuestionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JSQuestionsCountAggregateInputType | true
    _avg?: JSQuestionsAvgAggregateInputType
    _sum?: JSQuestionsSumAggregateInputType
    _min?: JSQuestionsMinAggregateInputType
    _max?: JSQuestionsMaxAggregateInputType
  }

  export type JSQuestionsGroupByOutputType = {
    id: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
    _count: JSQuestionsCountAggregateOutputType | null
    _avg: JSQuestionsAvgAggregateOutputType | null
    _sum: JSQuestionsSumAggregateOutputType | null
    _min: JSQuestionsMinAggregateOutputType | null
    _max: JSQuestionsMaxAggregateOutputType | null
  }

  type GetJSQuestionsGroupByPayload<T extends JSQuestionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JSQuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JSQuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JSQuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], JSQuestionsGroupByOutputType[P]>
        }
      >
    >


  export type JSQuestionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }, ExtArgs["result"]["jSQuestions"]>

  export type JSQuestionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }, ExtArgs["result"]["jSQuestions"]>

  export type JSQuestionsSelectScalar = {
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }


  export type $JSQuestionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JSQuestions"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question: string
      option1: string
      option2: string
      option3: string
      correct_answer: string
    }, ExtArgs["result"]["jSQuestions"]>
    composites: {}
  }

  type JSQuestionsGetPayload<S extends boolean | null | undefined | JSQuestionsDefaultArgs> = $Result.GetResult<Prisma.$JSQuestionsPayload, S>

  type JSQuestionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JSQuestionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JSQuestionsCountAggregateInputType | true
    }

  export interface JSQuestionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JSQuestions'], meta: { name: 'JSQuestions' } }
    /**
     * Find zero or one JSQuestions that matches the filter.
     * @param {JSQuestionsFindUniqueArgs} args - Arguments to find a JSQuestions
     * @example
     * // Get one JSQuestions
     * const jSQuestions = await prisma.jSQuestions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JSQuestionsFindUniqueArgs>(args: SelectSubset<T, JSQuestionsFindUniqueArgs<ExtArgs>>): Prisma__JSQuestionsClient<$Result.GetResult<Prisma.$JSQuestionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JSQuestions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JSQuestionsFindUniqueOrThrowArgs} args - Arguments to find a JSQuestions
     * @example
     * // Get one JSQuestions
     * const jSQuestions = await prisma.jSQuestions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JSQuestionsFindUniqueOrThrowArgs>(args: SelectSubset<T, JSQuestionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JSQuestionsClient<$Result.GetResult<Prisma.$JSQuestionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JSQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JSQuestionsFindFirstArgs} args - Arguments to find a JSQuestions
     * @example
     * // Get one JSQuestions
     * const jSQuestions = await prisma.jSQuestions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JSQuestionsFindFirstArgs>(args?: SelectSubset<T, JSQuestionsFindFirstArgs<ExtArgs>>): Prisma__JSQuestionsClient<$Result.GetResult<Prisma.$JSQuestionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JSQuestions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JSQuestionsFindFirstOrThrowArgs} args - Arguments to find a JSQuestions
     * @example
     * // Get one JSQuestions
     * const jSQuestions = await prisma.jSQuestions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JSQuestionsFindFirstOrThrowArgs>(args?: SelectSubset<T, JSQuestionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__JSQuestionsClient<$Result.GetResult<Prisma.$JSQuestionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JSQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JSQuestionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JSQuestions
     * const jSQuestions = await prisma.jSQuestions.findMany()
     * 
     * // Get first 10 JSQuestions
     * const jSQuestions = await prisma.jSQuestions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jSQuestionsWithIdOnly = await prisma.jSQuestions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JSQuestionsFindManyArgs>(args?: SelectSubset<T, JSQuestionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JSQuestionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JSQuestions.
     * @param {JSQuestionsCreateArgs} args - Arguments to create a JSQuestions.
     * @example
     * // Create one JSQuestions
     * const JSQuestions = await prisma.jSQuestions.create({
     *   data: {
     *     // ... data to create a JSQuestions
     *   }
     * })
     * 
     */
    create<T extends JSQuestionsCreateArgs>(args: SelectSubset<T, JSQuestionsCreateArgs<ExtArgs>>): Prisma__JSQuestionsClient<$Result.GetResult<Prisma.$JSQuestionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JSQuestions.
     * @param {JSQuestionsCreateManyArgs} args - Arguments to create many JSQuestions.
     * @example
     * // Create many JSQuestions
     * const jSQuestions = await prisma.jSQuestions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JSQuestionsCreateManyArgs>(args?: SelectSubset<T, JSQuestionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JSQuestions and returns the data saved in the database.
     * @param {JSQuestionsCreateManyAndReturnArgs} args - Arguments to create many JSQuestions.
     * @example
     * // Create many JSQuestions
     * const jSQuestions = await prisma.jSQuestions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JSQuestions and only return the `id`
     * const jSQuestionsWithIdOnly = await prisma.jSQuestions.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JSQuestionsCreateManyAndReturnArgs>(args?: SelectSubset<T, JSQuestionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JSQuestionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a JSQuestions.
     * @param {JSQuestionsDeleteArgs} args - Arguments to delete one JSQuestions.
     * @example
     * // Delete one JSQuestions
     * const JSQuestions = await prisma.jSQuestions.delete({
     *   where: {
     *     // ... filter to delete one JSQuestions
     *   }
     * })
     * 
     */
    delete<T extends JSQuestionsDeleteArgs>(args: SelectSubset<T, JSQuestionsDeleteArgs<ExtArgs>>): Prisma__JSQuestionsClient<$Result.GetResult<Prisma.$JSQuestionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JSQuestions.
     * @param {JSQuestionsUpdateArgs} args - Arguments to update one JSQuestions.
     * @example
     * // Update one JSQuestions
     * const jSQuestions = await prisma.jSQuestions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JSQuestionsUpdateArgs>(args: SelectSubset<T, JSQuestionsUpdateArgs<ExtArgs>>): Prisma__JSQuestionsClient<$Result.GetResult<Prisma.$JSQuestionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JSQuestions.
     * @param {JSQuestionsDeleteManyArgs} args - Arguments to filter JSQuestions to delete.
     * @example
     * // Delete a few JSQuestions
     * const { count } = await prisma.jSQuestions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JSQuestionsDeleteManyArgs>(args?: SelectSubset<T, JSQuestionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JSQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JSQuestionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JSQuestions
     * const jSQuestions = await prisma.jSQuestions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JSQuestionsUpdateManyArgs>(args: SelectSubset<T, JSQuestionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JSQuestions.
     * @param {JSQuestionsUpsertArgs} args - Arguments to update or create a JSQuestions.
     * @example
     * // Update or create a JSQuestions
     * const jSQuestions = await prisma.jSQuestions.upsert({
     *   create: {
     *     // ... data to create a JSQuestions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JSQuestions we want to update
     *   }
     * })
     */
    upsert<T extends JSQuestionsUpsertArgs>(args: SelectSubset<T, JSQuestionsUpsertArgs<ExtArgs>>): Prisma__JSQuestionsClient<$Result.GetResult<Prisma.$JSQuestionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JSQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JSQuestionsCountArgs} args - Arguments to filter JSQuestions to count.
     * @example
     * // Count the number of JSQuestions
     * const count = await prisma.jSQuestions.count({
     *   where: {
     *     // ... the filter for the JSQuestions we want to count
     *   }
     * })
    **/
    count<T extends JSQuestionsCountArgs>(
      args?: Subset<T, JSQuestionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JSQuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JSQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JSQuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JSQuestionsAggregateArgs>(args: Subset<T, JSQuestionsAggregateArgs>): Prisma.PrismaPromise<GetJSQuestionsAggregateType<T>>

    /**
     * Group by JSQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JSQuestionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JSQuestionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JSQuestionsGroupByArgs['orderBy'] }
        : { orderBy?: JSQuestionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JSQuestionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJSQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JSQuestions model
   */
  readonly fields: JSQuestionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JSQuestions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JSQuestionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JSQuestions model
   */ 
  interface JSQuestionsFieldRefs {
    readonly id: FieldRef<"JSQuestions", 'Int'>
    readonly question: FieldRef<"JSQuestions", 'String'>
    readonly option1: FieldRef<"JSQuestions", 'String'>
    readonly option2: FieldRef<"JSQuestions", 'String'>
    readonly option3: FieldRef<"JSQuestions", 'String'>
    readonly correct_answer: FieldRef<"JSQuestions", 'String'>
  }
    

  // Custom InputTypes
  /**
   * JSQuestions findUnique
   */
  export type JSQuestionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JSQuestions
     */
    select?: JSQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which JSQuestions to fetch.
     */
    where: JSQuestionsWhereUniqueInput
  }

  /**
   * JSQuestions findUniqueOrThrow
   */
  export type JSQuestionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JSQuestions
     */
    select?: JSQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which JSQuestions to fetch.
     */
    where: JSQuestionsWhereUniqueInput
  }

  /**
   * JSQuestions findFirst
   */
  export type JSQuestionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JSQuestions
     */
    select?: JSQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which JSQuestions to fetch.
     */
    where?: JSQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JSQuestions to fetch.
     */
    orderBy?: JSQuestionsOrderByWithRelationInput | JSQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JSQuestions.
     */
    cursor?: JSQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JSQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JSQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JSQuestions.
     */
    distinct?: JSQuestionsScalarFieldEnum | JSQuestionsScalarFieldEnum[]
  }

  /**
   * JSQuestions findFirstOrThrow
   */
  export type JSQuestionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JSQuestions
     */
    select?: JSQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which JSQuestions to fetch.
     */
    where?: JSQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JSQuestions to fetch.
     */
    orderBy?: JSQuestionsOrderByWithRelationInput | JSQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JSQuestions.
     */
    cursor?: JSQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JSQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JSQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JSQuestions.
     */
    distinct?: JSQuestionsScalarFieldEnum | JSQuestionsScalarFieldEnum[]
  }

  /**
   * JSQuestions findMany
   */
  export type JSQuestionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JSQuestions
     */
    select?: JSQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which JSQuestions to fetch.
     */
    where?: JSQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JSQuestions to fetch.
     */
    orderBy?: JSQuestionsOrderByWithRelationInput | JSQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JSQuestions.
     */
    cursor?: JSQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JSQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JSQuestions.
     */
    skip?: number
    distinct?: JSQuestionsScalarFieldEnum | JSQuestionsScalarFieldEnum[]
  }

  /**
   * JSQuestions create
   */
  export type JSQuestionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JSQuestions
     */
    select?: JSQuestionsSelect<ExtArgs> | null
    /**
     * The data needed to create a JSQuestions.
     */
    data: XOR<JSQuestionsCreateInput, JSQuestionsUncheckedCreateInput>
  }

  /**
   * JSQuestions createMany
   */
  export type JSQuestionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JSQuestions.
     */
    data: JSQuestionsCreateManyInput | JSQuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JSQuestions createManyAndReturn
   */
  export type JSQuestionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JSQuestions
     */
    select?: JSQuestionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many JSQuestions.
     */
    data: JSQuestionsCreateManyInput | JSQuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JSQuestions update
   */
  export type JSQuestionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JSQuestions
     */
    select?: JSQuestionsSelect<ExtArgs> | null
    /**
     * The data needed to update a JSQuestions.
     */
    data: XOR<JSQuestionsUpdateInput, JSQuestionsUncheckedUpdateInput>
    /**
     * Choose, which JSQuestions to update.
     */
    where: JSQuestionsWhereUniqueInput
  }

  /**
   * JSQuestions updateMany
   */
  export type JSQuestionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JSQuestions.
     */
    data: XOR<JSQuestionsUpdateManyMutationInput, JSQuestionsUncheckedUpdateManyInput>
    /**
     * Filter which JSQuestions to update
     */
    where?: JSQuestionsWhereInput
  }

  /**
   * JSQuestions upsert
   */
  export type JSQuestionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JSQuestions
     */
    select?: JSQuestionsSelect<ExtArgs> | null
    /**
     * The filter to search for the JSQuestions to update in case it exists.
     */
    where: JSQuestionsWhereUniqueInput
    /**
     * In case the JSQuestions found by the `where` argument doesn't exist, create a new JSQuestions with this data.
     */
    create: XOR<JSQuestionsCreateInput, JSQuestionsUncheckedCreateInput>
    /**
     * In case the JSQuestions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JSQuestionsUpdateInput, JSQuestionsUncheckedUpdateInput>
  }

  /**
   * JSQuestions delete
   */
  export type JSQuestionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JSQuestions
     */
    select?: JSQuestionsSelect<ExtArgs> | null
    /**
     * Filter which JSQuestions to delete.
     */
    where: JSQuestionsWhereUniqueInput
  }

  /**
   * JSQuestions deleteMany
   */
  export type JSQuestionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JSQuestions to delete
     */
    where?: JSQuestionsWhereInput
  }

  /**
   * JSQuestions without action
   */
  export type JSQuestionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JSQuestions
     */
    select?: JSQuestionsSelect<ExtArgs> | null
  }


  /**
   * Model JavaQuestions
   */

  export type AggregateJavaQuestions = {
    _count: JavaQuestionsCountAggregateOutputType | null
    _avg: JavaQuestionsAvgAggregateOutputType | null
    _sum: JavaQuestionsSumAggregateOutputType | null
    _min: JavaQuestionsMinAggregateOutputType | null
    _max: JavaQuestionsMaxAggregateOutputType | null
  }

  export type JavaQuestionsAvgAggregateOutputType = {
    id: number | null
  }

  export type JavaQuestionsSumAggregateOutputType = {
    id: number | null
  }

  export type JavaQuestionsMinAggregateOutputType = {
    id: number | null
    question: string | null
    option1: string | null
    option2: string | null
    option3: string | null
    correct_answer: string | null
  }

  export type JavaQuestionsMaxAggregateOutputType = {
    id: number | null
    question: string | null
    option1: string | null
    option2: string | null
    option3: string | null
    correct_answer: string | null
  }

  export type JavaQuestionsCountAggregateOutputType = {
    id: number
    question: number
    option1: number
    option2: number
    option3: number
    correct_answer: number
    _all: number
  }


  export type JavaQuestionsAvgAggregateInputType = {
    id?: true
  }

  export type JavaQuestionsSumAggregateInputType = {
    id?: true
  }

  export type JavaQuestionsMinAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
  }

  export type JavaQuestionsMaxAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
  }

  export type JavaQuestionsCountAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
    _all?: true
  }

  export type JavaQuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JavaQuestions to aggregate.
     */
    where?: JavaQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JavaQuestions to fetch.
     */
    orderBy?: JavaQuestionsOrderByWithRelationInput | JavaQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JavaQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JavaQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JavaQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JavaQuestions
    **/
    _count?: true | JavaQuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JavaQuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JavaQuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JavaQuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JavaQuestionsMaxAggregateInputType
  }

  export type GetJavaQuestionsAggregateType<T extends JavaQuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateJavaQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJavaQuestions[P]>
      : GetScalarType<T[P], AggregateJavaQuestions[P]>
  }




  export type JavaQuestionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JavaQuestionsWhereInput
    orderBy?: JavaQuestionsOrderByWithAggregationInput | JavaQuestionsOrderByWithAggregationInput[]
    by: JavaQuestionsScalarFieldEnum[] | JavaQuestionsScalarFieldEnum
    having?: JavaQuestionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JavaQuestionsCountAggregateInputType | true
    _avg?: JavaQuestionsAvgAggregateInputType
    _sum?: JavaQuestionsSumAggregateInputType
    _min?: JavaQuestionsMinAggregateInputType
    _max?: JavaQuestionsMaxAggregateInputType
  }

  export type JavaQuestionsGroupByOutputType = {
    id: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
    _count: JavaQuestionsCountAggregateOutputType | null
    _avg: JavaQuestionsAvgAggregateOutputType | null
    _sum: JavaQuestionsSumAggregateOutputType | null
    _min: JavaQuestionsMinAggregateOutputType | null
    _max: JavaQuestionsMaxAggregateOutputType | null
  }

  type GetJavaQuestionsGroupByPayload<T extends JavaQuestionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JavaQuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JavaQuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JavaQuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], JavaQuestionsGroupByOutputType[P]>
        }
      >
    >


  export type JavaQuestionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }, ExtArgs["result"]["javaQuestions"]>

  export type JavaQuestionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }, ExtArgs["result"]["javaQuestions"]>

  export type JavaQuestionsSelectScalar = {
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }


  export type $JavaQuestionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JavaQuestions"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question: string
      option1: string
      option2: string
      option3: string
      correct_answer: string
    }, ExtArgs["result"]["javaQuestions"]>
    composites: {}
  }

  type JavaQuestionsGetPayload<S extends boolean | null | undefined | JavaQuestionsDefaultArgs> = $Result.GetResult<Prisma.$JavaQuestionsPayload, S>

  type JavaQuestionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JavaQuestionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JavaQuestionsCountAggregateInputType | true
    }

  export interface JavaQuestionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JavaQuestions'], meta: { name: 'JavaQuestions' } }
    /**
     * Find zero or one JavaQuestions that matches the filter.
     * @param {JavaQuestionsFindUniqueArgs} args - Arguments to find a JavaQuestions
     * @example
     * // Get one JavaQuestions
     * const javaQuestions = await prisma.javaQuestions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JavaQuestionsFindUniqueArgs>(args: SelectSubset<T, JavaQuestionsFindUniqueArgs<ExtArgs>>): Prisma__JavaQuestionsClient<$Result.GetResult<Prisma.$JavaQuestionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JavaQuestions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JavaQuestionsFindUniqueOrThrowArgs} args - Arguments to find a JavaQuestions
     * @example
     * // Get one JavaQuestions
     * const javaQuestions = await prisma.javaQuestions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JavaQuestionsFindUniqueOrThrowArgs>(args: SelectSubset<T, JavaQuestionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JavaQuestionsClient<$Result.GetResult<Prisma.$JavaQuestionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JavaQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JavaQuestionsFindFirstArgs} args - Arguments to find a JavaQuestions
     * @example
     * // Get one JavaQuestions
     * const javaQuestions = await prisma.javaQuestions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JavaQuestionsFindFirstArgs>(args?: SelectSubset<T, JavaQuestionsFindFirstArgs<ExtArgs>>): Prisma__JavaQuestionsClient<$Result.GetResult<Prisma.$JavaQuestionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JavaQuestions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JavaQuestionsFindFirstOrThrowArgs} args - Arguments to find a JavaQuestions
     * @example
     * // Get one JavaQuestions
     * const javaQuestions = await prisma.javaQuestions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JavaQuestionsFindFirstOrThrowArgs>(args?: SelectSubset<T, JavaQuestionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__JavaQuestionsClient<$Result.GetResult<Prisma.$JavaQuestionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JavaQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JavaQuestionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JavaQuestions
     * const javaQuestions = await prisma.javaQuestions.findMany()
     * 
     * // Get first 10 JavaQuestions
     * const javaQuestions = await prisma.javaQuestions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const javaQuestionsWithIdOnly = await prisma.javaQuestions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JavaQuestionsFindManyArgs>(args?: SelectSubset<T, JavaQuestionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JavaQuestionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JavaQuestions.
     * @param {JavaQuestionsCreateArgs} args - Arguments to create a JavaQuestions.
     * @example
     * // Create one JavaQuestions
     * const JavaQuestions = await prisma.javaQuestions.create({
     *   data: {
     *     // ... data to create a JavaQuestions
     *   }
     * })
     * 
     */
    create<T extends JavaQuestionsCreateArgs>(args: SelectSubset<T, JavaQuestionsCreateArgs<ExtArgs>>): Prisma__JavaQuestionsClient<$Result.GetResult<Prisma.$JavaQuestionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JavaQuestions.
     * @param {JavaQuestionsCreateManyArgs} args - Arguments to create many JavaQuestions.
     * @example
     * // Create many JavaQuestions
     * const javaQuestions = await prisma.javaQuestions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JavaQuestionsCreateManyArgs>(args?: SelectSubset<T, JavaQuestionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JavaQuestions and returns the data saved in the database.
     * @param {JavaQuestionsCreateManyAndReturnArgs} args - Arguments to create many JavaQuestions.
     * @example
     * // Create many JavaQuestions
     * const javaQuestions = await prisma.javaQuestions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JavaQuestions and only return the `id`
     * const javaQuestionsWithIdOnly = await prisma.javaQuestions.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JavaQuestionsCreateManyAndReturnArgs>(args?: SelectSubset<T, JavaQuestionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JavaQuestionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a JavaQuestions.
     * @param {JavaQuestionsDeleteArgs} args - Arguments to delete one JavaQuestions.
     * @example
     * // Delete one JavaQuestions
     * const JavaQuestions = await prisma.javaQuestions.delete({
     *   where: {
     *     // ... filter to delete one JavaQuestions
     *   }
     * })
     * 
     */
    delete<T extends JavaQuestionsDeleteArgs>(args: SelectSubset<T, JavaQuestionsDeleteArgs<ExtArgs>>): Prisma__JavaQuestionsClient<$Result.GetResult<Prisma.$JavaQuestionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JavaQuestions.
     * @param {JavaQuestionsUpdateArgs} args - Arguments to update one JavaQuestions.
     * @example
     * // Update one JavaQuestions
     * const javaQuestions = await prisma.javaQuestions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JavaQuestionsUpdateArgs>(args: SelectSubset<T, JavaQuestionsUpdateArgs<ExtArgs>>): Prisma__JavaQuestionsClient<$Result.GetResult<Prisma.$JavaQuestionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JavaQuestions.
     * @param {JavaQuestionsDeleteManyArgs} args - Arguments to filter JavaQuestions to delete.
     * @example
     * // Delete a few JavaQuestions
     * const { count } = await prisma.javaQuestions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JavaQuestionsDeleteManyArgs>(args?: SelectSubset<T, JavaQuestionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JavaQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JavaQuestionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JavaQuestions
     * const javaQuestions = await prisma.javaQuestions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JavaQuestionsUpdateManyArgs>(args: SelectSubset<T, JavaQuestionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JavaQuestions.
     * @param {JavaQuestionsUpsertArgs} args - Arguments to update or create a JavaQuestions.
     * @example
     * // Update or create a JavaQuestions
     * const javaQuestions = await prisma.javaQuestions.upsert({
     *   create: {
     *     // ... data to create a JavaQuestions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JavaQuestions we want to update
     *   }
     * })
     */
    upsert<T extends JavaQuestionsUpsertArgs>(args: SelectSubset<T, JavaQuestionsUpsertArgs<ExtArgs>>): Prisma__JavaQuestionsClient<$Result.GetResult<Prisma.$JavaQuestionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JavaQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JavaQuestionsCountArgs} args - Arguments to filter JavaQuestions to count.
     * @example
     * // Count the number of JavaQuestions
     * const count = await prisma.javaQuestions.count({
     *   where: {
     *     // ... the filter for the JavaQuestions we want to count
     *   }
     * })
    **/
    count<T extends JavaQuestionsCountArgs>(
      args?: Subset<T, JavaQuestionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JavaQuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JavaQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JavaQuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JavaQuestionsAggregateArgs>(args: Subset<T, JavaQuestionsAggregateArgs>): Prisma.PrismaPromise<GetJavaQuestionsAggregateType<T>>

    /**
     * Group by JavaQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JavaQuestionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JavaQuestionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JavaQuestionsGroupByArgs['orderBy'] }
        : { orderBy?: JavaQuestionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JavaQuestionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJavaQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JavaQuestions model
   */
  readonly fields: JavaQuestionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JavaQuestions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JavaQuestionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JavaQuestions model
   */ 
  interface JavaQuestionsFieldRefs {
    readonly id: FieldRef<"JavaQuestions", 'Int'>
    readonly question: FieldRef<"JavaQuestions", 'String'>
    readonly option1: FieldRef<"JavaQuestions", 'String'>
    readonly option2: FieldRef<"JavaQuestions", 'String'>
    readonly option3: FieldRef<"JavaQuestions", 'String'>
    readonly correct_answer: FieldRef<"JavaQuestions", 'String'>
  }
    

  // Custom InputTypes
  /**
   * JavaQuestions findUnique
   */
  export type JavaQuestionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JavaQuestions
     */
    select?: JavaQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which JavaQuestions to fetch.
     */
    where: JavaQuestionsWhereUniqueInput
  }

  /**
   * JavaQuestions findUniqueOrThrow
   */
  export type JavaQuestionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JavaQuestions
     */
    select?: JavaQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which JavaQuestions to fetch.
     */
    where: JavaQuestionsWhereUniqueInput
  }

  /**
   * JavaQuestions findFirst
   */
  export type JavaQuestionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JavaQuestions
     */
    select?: JavaQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which JavaQuestions to fetch.
     */
    where?: JavaQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JavaQuestions to fetch.
     */
    orderBy?: JavaQuestionsOrderByWithRelationInput | JavaQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JavaQuestions.
     */
    cursor?: JavaQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JavaQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JavaQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JavaQuestions.
     */
    distinct?: JavaQuestionsScalarFieldEnum | JavaQuestionsScalarFieldEnum[]
  }

  /**
   * JavaQuestions findFirstOrThrow
   */
  export type JavaQuestionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JavaQuestions
     */
    select?: JavaQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which JavaQuestions to fetch.
     */
    where?: JavaQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JavaQuestions to fetch.
     */
    orderBy?: JavaQuestionsOrderByWithRelationInput | JavaQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JavaQuestions.
     */
    cursor?: JavaQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JavaQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JavaQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JavaQuestions.
     */
    distinct?: JavaQuestionsScalarFieldEnum | JavaQuestionsScalarFieldEnum[]
  }

  /**
   * JavaQuestions findMany
   */
  export type JavaQuestionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JavaQuestions
     */
    select?: JavaQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which JavaQuestions to fetch.
     */
    where?: JavaQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JavaQuestions to fetch.
     */
    orderBy?: JavaQuestionsOrderByWithRelationInput | JavaQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JavaQuestions.
     */
    cursor?: JavaQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JavaQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JavaQuestions.
     */
    skip?: number
    distinct?: JavaQuestionsScalarFieldEnum | JavaQuestionsScalarFieldEnum[]
  }

  /**
   * JavaQuestions create
   */
  export type JavaQuestionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JavaQuestions
     */
    select?: JavaQuestionsSelect<ExtArgs> | null
    /**
     * The data needed to create a JavaQuestions.
     */
    data: XOR<JavaQuestionsCreateInput, JavaQuestionsUncheckedCreateInput>
  }

  /**
   * JavaQuestions createMany
   */
  export type JavaQuestionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JavaQuestions.
     */
    data: JavaQuestionsCreateManyInput | JavaQuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JavaQuestions createManyAndReturn
   */
  export type JavaQuestionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JavaQuestions
     */
    select?: JavaQuestionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many JavaQuestions.
     */
    data: JavaQuestionsCreateManyInput | JavaQuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JavaQuestions update
   */
  export type JavaQuestionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JavaQuestions
     */
    select?: JavaQuestionsSelect<ExtArgs> | null
    /**
     * The data needed to update a JavaQuestions.
     */
    data: XOR<JavaQuestionsUpdateInput, JavaQuestionsUncheckedUpdateInput>
    /**
     * Choose, which JavaQuestions to update.
     */
    where: JavaQuestionsWhereUniqueInput
  }

  /**
   * JavaQuestions updateMany
   */
  export type JavaQuestionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JavaQuestions.
     */
    data: XOR<JavaQuestionsUpdateManyMutationInput, JavaQuestionsUncheckedUpdateManyInput>
    /**
     * Filter which JavaQuestions to update
     */
    where?: JavaQuestionsWhereInput
  }

  /**
   * JavaQuestions upsert
   */
  export type JavaQuestionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JavaQuestions
     */
    select?: JavaQuestionsSelect<ExtArgs> | null
    /**
     * The filter to search for the JavaQuestions to update in case it exists.
     */
    where: JavaQuestionsWhereUniqueInput
    /**
     * In case the JavaQuestions found by the `where` argument doesn't exist, create a new JavaQuestions with this data.
     */
    create: XOR<JavaQuestionsCreateInput, JavaQuestionsUncheckedCreateInput>
    /**
     * In case the JavaQuestions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JavaQuestionsUpdateInput, JavaQuestionsUncheckedUpdateInput>
  }

  /**
   * JavaQuestions delete
   */
  export type JavaQuestionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JavaQuestions
     */
    select?: JavaQuestionsSelect<ExtArgs> | null
    /**
     * Filter which JavaQuestions to delete.
     */
    where: JavaQuestionsWhereUniqueInput
  }

  /**
   * JavaQuestions deleteMany
   */
  export type JavaQuestionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JavaQuestions to delete
     */
    where?: JavaQuestionsWhereInput
  }

  /**
   * JavaQuestions without action
   */
  export type JavaQuestionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JavaQuestions
     */
    select?: JavaQuestionsSelect<ExtArgs> | null
  }


  /**
   * Model PythonQuestions
   */

  export type AggregatePythonQuestions = {
    _count: PythonQuestionsCountAggregateOutputType | null
    _avg: PythonQuestionsAvgAggregateOutputType | null
    _sum: PythonQuestionsSumAggregateOutputType | null
    _min: PythonQuestionsMinAggregateOutputType | null
    _max: PythonQuestionsMaxAggregateOutputType | null
  }

  export type PythonQuestionsAvgAggregateOutputType = {
    id: number | null
  }

  export type PythonQuestionsSumAggregateOutputType = {
    id: number | null
  }

  export type PythonQuestionsMinAggregateOutputType = {
    id: number | null
    question: string | null
    option1: string | null
    option2: string | null
    option3: string | null
    correct_answer: string | null
  }

  export type PythonQuestionsMaxAggregateOutputType = {
    id: number | null
    question: string | null
    option1: string | null
    option2: string | null
    option3: string | null
    correct_answer: string | null
  }

  export type PythonQuestionsCountAggregateOutputType = {
    id: number
    question: number
    option1: number
    option2: number
    option3: number
    correct_answer: number
    _all: number
  }


  export type PythonQuestionsAvgAggregateInputType = {
    id?: true
  }

  export type PythonQuestionsSumAggregateInputType = {
    id?: true
  }

  export type PythonQuestionsMinAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
  }

  export type PythonQuestionsMaxAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
  }

  export type PythonQuestionsCountAggregateInputType = {
    id?: true
    question?: true
    option1?: true
    option2?: true
    option3?: true
    correct_answer?: true
    _all?: true
  }

  export type PythonQuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PythonQuestions to aggregate.
     */
    where?: PythonQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PythonQuestions to fetch.
     */
    orderBy?: PythonQuestionsOrderByWithRelationInput | PythonQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PythonQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PythonQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PythonQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PythonQuestions
    **/
    _count?: true | PythonQuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PythonQuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PythonQuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PythonQuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PythonQuestionsMaxAggregateInputType
  }

  export type GetPythonQuestionsAggregateType<T extends PythonQuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregatePythonQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePythonQuestions[P]>
      : GetScalarType<T[P], AggregatePythonQuestions[P]>
  }




  export type PythonQuestionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PythonQuestionsWhereInput
    orderBy?: PythonQuestionsOrderByWithAggregationInput | PythonQuestionsOrderByWithAggregationInput[]
    by: PythonQuestionsScalarFieldEnum[] | PythonQuestionsScalarFieldEnum
    having?: PythonQuestionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PythonQuestionsCountAggregateInputType | true
    _avg?: PythonQuestionsAvgAggregateInputType
    _sum?: PythonQuestionsSumAggregateInputType
    _min?: PythonQuestionsMinAggregateInputType
    _max?: PythonQuestionsMaxAggregateInputType
  }

  export type PythonQuestionsGroupByOutputType = {
    id: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
    _count: PythonQuestionsCountAggregateOutputType | null
    _avg: PythonQuestionsAvgAggregateOutputType | null
    _sum: PythonQuestionsSumAggregateOutputType | null
    _min: PythonQuestionsMinAggregateOutputType | null
    _max: PythonQuestionsMaxAggregateOutputType | null
  }

  type GetPythonQuestionsGroupByPayload<T extends PythonQuestionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PythonQuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PythonQuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PythonQuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], PythonQuestionsGroupByOutputType[P]>
        }
      >
    >


  export type PythonQuestionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }, ExtArgs["result"]["pythonQuestions"]>

  export type PythonQuestionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }, ExtArgs["result"]["pythonQuestions"]>

  export type PythonQuestionsSelectScalar = {
    id?: boolean
    question?: boolean
    option1?: boolean
    option2?: boolean
    option3?: boolean
    correct_answer?: boolean
  }


  export type $PythonQuestionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PythonQuestions"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question: string
      option1: string
      option2: string
      option3: string
      correct_answer: string
    }, ExtArgs["result"]["pythonQuestions"]>
    composites: {}
  }

  type PythonQuestionsGetPayload<S extends boolean | null | undefined | PythonQuestionsDefaultArgs> = $Result.GetResult<Prisma.$PythonQuestionsPayload, S>

  type PythonQuestionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PythonQuestionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PythonQuestionsCountAggregateInputType | true
    }

  export interface PythonQuestionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PythonQuestions'], meta: { name: 'PythonQuestions' } }
    /**
     * Find zero or one PythonQuestions that matches the filter.
     * @param {PythonQuestionsFindUniqueArgs} args - Arguments to find a PythonQuestions
     * @example
     * // Get one PythonQuestions
     * const pythonQuestions = await prisma.pythonQuestions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PythonQuestionsFindUniqueArgs>(args: SelectSubset<T, PythonQuestionsFindUniqueArgs<ExtArgs>>): Prisma__PythonQuestionsClient<$Result.GetResult<Prisma.$PythonQuestionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PythonQuestions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PythonQuestionsFindUniqueOrThrowArgs} args - Arguments to find a PythonQuestions
     * @example
     * // Get one PythonQuestions
     * const pythonQuestions = await prisma.pythonQuestions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PythonQuestionsFindUniqueOrThrowArgs>(args: SelectSubset<T, PythonQuestionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PythonQuestionsClient<$Result.GetResult<Prisma.$PythonQuestionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PythonQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PythonQuestionsFindFirstArgs} args - Arguments to find a PythonQuestions
     * @example
     * // Get one PythonQuestions
     * const pythonQuestions = await prisma.pythonQuestions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PythonQuestionsFindFirstArgs>(args?: SelectSubset<T, PythonQuestionsFindFirstArgs<ExtArgs>>): Prisma__PythonQuestionsClient<$Result.GetResult<Prisma.$PythonQuestionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PythonQuestions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PythonQuestionsFindFirstOrThrowArgs} args - Arguments to find a PythonQuestions
     * @example
     * // Get one PythonQuestions
     * const pythonQuestions = await prisma.pythonQuestions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PythonQuestionsFindFirstOrThrowArgs>(args?: SelectSubset<T, PythonQuestionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PythonQuestionsClient<$Result.GetResult<Prisma.$PythonQuestionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PythonQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PythonQuestionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PythonQuestions
     * const pythonQuestions = await prisma.pythonQuestions.findMany()
     * 
     * // Get first 10 PythonQuestions
     * const pythonQuestions = await prisma.pythonQuestions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pythonQuestionsWithIdOnly = await prisma.pythonQuestions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PythonQuestionsFindManyArgs>(args?: SelectSubset<T, PythonQuestionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PythonQuestionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PythonQuestions.
     * @param {PythonQuestionsCreateArgs} args - Arguments to create a PythonQuestions.
     * @example
     * // Create one PythonQuestions
     * const PythonQuestions = await prisma.pythonQuestions.create({
     *   data: {
     *     // ... data to create a PythonQuestions
     *   }
     * })
     * 
     */
    create<T extends PythonQuestionsCreateArgs>(args: SelectSubset<T, PythonQuestionsCreateArgs<ExtArgs>>): Prisma__PythonQuestionsClient<$Result.GetResult<Prisma.$PythonQuestionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PythonQuestions.
     * @param {PythonQuestionsCreateManyArgs} args - Arguments to create many PythonQuestions.
     * @example
     * // Create many PythonQuestions
     * const pythonQuestions = await prisma.pythonQuestions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PythonQuestionsCreateManyArgs>(args?: SelectSubset<T, PythonQuestionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PythonQuestions and returns the data saved in the database.
     * @param {PythonQuestionsCreateManyAndReturnArgs} args - Arguments to create many PythonQuestions.
     * @example
     * // Create many PythonQuestions
     * const pythonQuestions = await prisma.pythonQuestions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PythonQuestions and only return the `id`
     * const pythonQuestionsWithIdOnly = await prisma.pythonQuestions.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PythonQuestionsCreateManyAndReturnArgs>(args?: SelectSubset<T, PythonQuestionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PythonQuestionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PythonQuestions.
     * @param {PythonQuestionsDeleteArgs} args - Arguments to delete one PythonQuestions.
     * @example
     * // Delete one PythonQuestions
     * const PythonQuestions = await prisma.pythonQuestions.delete({
     *   where: {
     *     // ... filter to delete one PythonQuestions
     *   }
     * })
     * 
     */
    delete<T extends PythonQuestionsDeleteArgs>(args: SelectSubset<T, PythonQuestionsDeleteArgs<ExtArgs>>): Prisma__PythonQuestionsClient<$Result.GetResult<Prisma.$PythonQuestionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PythonQuestions.
     * @param {PythonQuestionsUpdateArgs} args - Arguments to update one PythonQuestions.
     * @example
     * // Update one PythonQuestions
     * const pythonQuestions = await prisma.pythonQuestions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PythonQuestionsUpdateArgs>(args: SelectSubset<T, PythonQuestionsUpdateArgs<ExtArgs>>): Prisma__PythonQuestionsClient<$Result.GetResult<Prisma.$PythonQuestionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PythonQuestions.
     * @param {PythonQuestionsDeleteManyArgs} args - Arguments to filter PythonQuestions to delete.
     * @example
     * // Delete a few PythonQuestions
     * const { count } = await prisma.pythonQuestions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PythonQuestionsDeleteManyArgs>(args?: SelectSubset<T, PythonQuestionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PythonQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PythonQuestionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PythonQuestions
     * const pythonQuestions = await prisma.pythonQuestions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PythonQuestionsUpdateManyArgs>(args: SelectSubset<T, PythonQuestionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PythonQuestions.
     * @param {PythonQuestionsUpsertArgs} args - Arguments to update or create a PythonQuestions.
     * @example
     * // Update or create a PythonQuestions
     * const pythonQuestions = await prisma.pythonQuestions.upsert({
     *   create: {
     *     // ... data to create a PythonQuestions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PythonQuestions we want to update
     *   }
     * })
     */
    upsert<T extends PythonQuestionsUpsertArgs>(args: SelectSubset<T, PythonQuestionsUpsertArgs<ExtArgs>>): Prisma__PythonQuestionsClient<$Result.GetResult<Prisma.$PythonQuestionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PythonQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PythonQuestionsCountArgs} args - Arguments to filter PythonQuestions to count.
     * @example
     * // Count the number of PythonQuestions
     * const count = await prisma.pythonQuestions.count({
     *   where: {
     *     // ... the filter for the PythonQuestions we want to count
     *   }
     * })
    **/
    count<T extends PythonQuestionsCountArgs>(
      args?: Subset<T, PythonQuestionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PythonQuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PythonQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PythonQuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PythonQuestionsAggregateArgs>(args: Subset<T, PythonQuestionsAggregateArgs>): Prisma.PrismaPromise<GetPythonQuestionsAggregateType<T>>

    /**
     * Group by PythonQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PythonQuestionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PythonQuestionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PythonQuestionsGroupByArgs['orderBy'] }
        : { orderBy?: PythonQuestionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PythonQuestionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPythonQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PythonQuestions model
   */
  readonly fields: PythonQuestionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PythonQuestions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PythonQuestionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PythonQuestions model
   */ 
  interface PythonQuestionsFieldRefs {
    readonly id: FieldRef<"PythonQuestions", 'Int'>
    readonly question: FieldRef<"PythonQuestions", 'String'>
    readonly option1: FieldRef<"PythonQuestions", 'String'>
    readonly option2: FieldRef<"PythonQuestions", 'String'>
    readonly option3: FieldRef<"PythonQuestions", 'String'>
    readonly correct_answer: FieldRef<"PythonQuestions", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PythonQuestions findUnique
   */
  export type PythonQuestionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PythonQuestions
     */
    select?: PythonQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which PythonQuestions to fetch.
     */
    where: PythonQuestionsWhereUniqueInput
  }

  /**
   * PythonQuestions findUniqueOrThrow
   */
  export type PythonQuestionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PythonQuestions
     */
    select?: PythonQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which PythonQuestions to fetch.
     */
    where: PythonQuestionsWhereUniqueInput
  }

  /**
   * PythonQuestions findFirst
   */
  export type PythonQuestionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PythonQuestions
     */
    select?: PythonQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which PythonQuestions to fetch.
     */
    where?: PythonQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PythonQuestions to fetch.
     */
    orderBy?: PythonQuestionsOrderByWithRelationInput | PythonQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PythonQuestions.
     */
    cursor?: PythonQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PythonQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PythonQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PythonQuestions.
     */
    distinct?: PythonQuestionsScalarFieldEnum | PythonQuestionsScalarFieldEnum[]
  }

  /**
   * PythonQuestions findFirstOrThrow
   */
  export type PythonQuestionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PythonQuestions
     */
    select?: PythonQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which PythonQuestions to fetch.
     */
    where?: PythonQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PythonQuestions to fetch.
     */
    orderBy?: PythonQuestionsOrderByWithRelationInput | PythonQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PythonQuestions.
     */
    cursor?: PythonQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PythonQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PythonQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PythonQuestions.
     */
    distinct?: PythonQuestionsScalarFieldEnum | PythonQuestionsScalarFieldEnum[]
  }

  /**
   * PythonQuestions findMany
   */
  export type PythonQuestionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PythonQuestions
     */
    select?: PythonQuestionsSelect<ExtArgs> | null
    /**
     * Filter, which PythonQuestions to fetch.
     */
    where?: PythonQuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PythonQuestions to fetch.
     */
    orderBy?: PythonQuestionsOrderByWithRelationInput | PythonQuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PythonQuestions.
     */
    cursor?: PythonQuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PythonQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PythonQuestions.
     */
    skip?: number
    distinct?: PythonQuestionsScalarFieldEnum | PythonQuestionsScalarFieldEnum[]
  }

  /**
   * PythonQuestions create
   */
  export type PythonQuestionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PythonQuestions
     */
    select?: PythonQuestionsSelect<ExtArgs> | null
    /**
     * The data needed to create a PythonQuestions.
     */
    data: XOR<PythonQuestionsCreateInput, PythonQuestionsUncheckedCreateInput>
  }

  /**
   * PythonQuestions createMany
   */
  export type PythonQuestionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PythonQuestions.
     */
    data: PythonQuestionsCreateManyInput | PythonQuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PythonQuestions createManyAndReturn
   */
  export type PythonQuestionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PythonQuestions
     */
    select?: PythonQuestionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PythonQuestions.
     */
    data: PythonQuestionsCreateManyInput | PythonQuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PythonQuestions update
   */
  export type PythonQuestionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PythonQuestions
     */
    select?: PythonQuestionsSelect<ExtArgs> | null
    /**
     * The data needed to update a PythonQuestions.
     */
    data: XOR<PythonQuestionsUpdateInput, PythonQuestionsUncheckedUpdateInput>
    /**
     * Choose, which PythonQuestions to update.
     */
    where: PythonQuestionsWhereUniqueInput
  }

  /**
   * PythonQuestions updateMany
   */
  export type PythonQuestionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PythonQuestions.
     */
    data: XOR<PythonQuestionsUpdateManyMutationInput, PythonQuestionsUncheckedUpdateManyInput>
    /**
     * Filter which PythonQuestions to update
     */
    where?: PythonQuestionsWhereInput
  }

  /**
   * PythonQuestions upsert
   */
  export type PythonQuestionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PythonQuestions
     */
    select?: PythonQuestionsSelect<ExtArgs> | null
    /**
     * The filter to search for the PythonQuestions to update in case it exists.
     */
    where: PythonQuestionsWhereUniqueInput
    /**
     * In case the PythonQuestions found by the `where` argument doesn't exist, create a new PythonQuestions with this data.
     */
    create: XOR<PythonQuestionsCreateInput, PythonQuestionsUncheckedCreateInput>
    /**
     * In case the PythonQuestions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PythonQuestionsUpdateInput, PythonQuestionsUncheckedUpdateInput>
  }

  /**
   * PythonQuestions delete
   */
  export type PythonQuestionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PythonQuestions
     */
    select?: PythonQuestionsSelect<ExtArgs> | null
    /**
     * Filter which PythonQuestions to delete.
     */
    where: PythonQuestionsWhereUniqueInput
  }

  /**
   * PythonQuestions deleteMany
   */
  export type PythonQuestionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PythonQuestions to delete
     */
    where?: PythonQuestionsWhereInput
  }

  /**
   * PythonQuestions without action
   */
  export type PythonQuestionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PythonQuestions
     */
    select?: PythonQuestionsSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const HTMLQuestionsScalarFieldEnum: {
    id: 'id',
    question: 'question',
    option1: 'option1',
    option2: 'option2',
    option3: 'option3',
    correct_answer: 'correct_answer'
  };

  export type HTMLQuestionsScalarFieldEnum = (typeof HTMLQuestionsScalarFieldEnum)[keyof typeof HTMLQuestionsScalarFieldEnum]


  export const CSSQuestionsScalarFieldEnum: {
    id: 'id',
    question: 'question',
    option1: 'option1',
    option2: 'option2',
    option3: 'option3',
    correct_answer: 'correct_answer'
  };

  export type CSSQuestionsScalarFieldEnum = (typeof CSSQuestionsScalarFieldEnum)[keyof typeof CSSQuestionsScalarFieldEnum]


  export const JSQuestionsScalarFieldEnum: {
    id: 'id',
    question: 'question',
    option1: 'option1',
    option2: 'option2',
    option3: 'option3',
    correct_answer: 'correct_answer'
  };

  export type JSQuestionsScalarFieldEnum = (typeof JSQuestionsScalarFieldEnum)[keyof typeof JSQuestionsScalarFieldEnum]


  export const JavaQuestionsScalarFieldEnum: {
    id: 'id',
    question: 'question',
    option1: 'option1',
    option2: 'option2',
    option3: 'option3',
    correct_answer: 'correct_answer'
  };

  export type JavaQuestionsScalarFieldEnum = (typeof JavaQuestionsScalarFieldEnum)[keyof typeof JavaQuestionsScalarFieldEnum]


  export const PythonQuestionsScalarFieldEnum: {
    id: 'id',
    question: 'question',
    option1: 'option1',
    option2: 'option2',
    option3: 'option3',
    correct_answer: 'correct_answer'
  };

  export type PythonQuestionsScalarFieldEnum = (typeof PythonQuestionsScalarFieldEnum)[keyof typeof PythonQuestionsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type HTMLQuestionsWhereInput = {
    AND?: HTMLQuestionsWhereInput | HTMLQuestionsWhereInput[]
    OR?: HTMLQuestionsWhereInput[]
    NOT?: HTMLQuestionsWhereInput | HTMLQuestionsWhereInput[]
    id?: IntFilter<"HTMLQuestions"> | number
    question?: StringFilter<"HTMLQuestions"> | string
    option1?: StringFilter<"HTMLQuestions"> | string
    option2?: StringFilter<"HTMLQuestions"> | string
    option3?: StringFilter<"HTMLQuestions"> | string
    correct_answer?: StringFilter<"HTMLQuestions"> | string
  }

  export type HTMLQuestionsOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type HTMLQuestionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HTMLQuestionsWhereInput | HTMLQuestionsWhereInput[]
    OR?: HTMLQuestionsWhereInput[]
    NOT?: HTMLQuestionsWhereInput | HTMLQuestionsWhereInput[]
    question?: StringFilter<"HTMLQuestions"> | string
    option1?: StringFilter<"HTMLQuestions"> | string
    option2?: StringFilter<"HTMLQuestions"> | string
    option3?: StringFilter<"HTMLQuestions"> | string
    correct_answer?: StringFilter<"HTMLQuestions"> | string
  }, "id">

  export type HTMLQuestionsOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
    _count?: HTMLQuestionsCountOrderByAggregateInput
    _avg?: HTMLQuestionsAvgOrderByAggregateInput
    _max?: HTMLQuestionsMaxOrderByAggregateInput
    _min?: HTMLQuestionsMinOrderByAggregateInput
    _sum?: HTMLQuestionsSumOrderByAggregateInput
  }

  export type HTMLQuestionsScalarWhereWithAggregatesInput = {
    AND?: HTMLQuestionsScalarWhereWithAggregatesInput | HTMLQuestionsScalarWhereWithAggregatesInput[]
    OR?: HTMLQuestionsScalarWhereWithAggregatesInput[]
    NOT?: HTMLQuestionsScalarWhereWithAggregatesInput | HTMLQuestionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HTMLQuestions"> | number
    question?: StringWithAggregatesFilter<"HTMLQuestions"> | string
    option1?: StringWithAggregatesFilter<"HTMLQuestions"> | string
    option2?: StringWithAggregatesFilter<"HTMLQuestions"> | string
    option3?: StringWithAggregatesFilter<"HTMLQuestions"> | string
    correct_answer?: StringWithAggregatesFilter<"HTMLQuestions"> | string
  }

  export type CSSQuestionsWhereInput = {
    AND?: CSSQuestionsWhereInput | CSSQuestionsWhereInput[]
    OR?: CSSQuestionsWhereInput[]
    NOT?: CSSQuestionsWhereInput | CSSQuestionsWhereInput[]
    id?: IntFilter<"CSSQuestions"> | number
    question?: StringFilter<"CSSQuestions"> | string
    option1?: StringFilter<"CSSQuestions"> | string
    option2?: StringFilter<"CSSQuestions"> | string
    option3?: StringFilter<"CSSQuestions"> | string
    correct_answer?: StringFilter<"CSSQuestions"> | string
  }

  export type CSSQuestionsOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type CSSQuestionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CSSQuestionsWhereInput | CSSQuestionsWhereInput[]
    OR?: CSSQuestionsWhereInput[]
    NOT?: CSSQuestionsWhereInput | CSSQuestionsWhereInput[]
    question?: StringFilter<"CSSQuestions"> | string
    option1?: StringFilter<"CSSQuestions"> | string
    option2?: StringFilter<"CSSQuestions"> | string
    option3?: StringFilter<"CSSQuestions"> | string
    correct_answer?: StringFilter<"CSSQuestions"> | string
  }, "id">

  export type CSSQuestionsOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
    _count?: CSSQuestionsCountOrderByAggregateInput
    _avg?: CSSQuestionsAvgOrderByAggregateInput
    _max?: CSSQuestionsMaxOrderByAggregateInput
    _min?: CSSQuestionsMinOrderByAggregateInput
    _sum?: CSSQuestionsSumOrderByAggregateInput
  }

  export type CSSQuestionsScalarWhereWithAggregatesInput = {
    AND?: CSSQuestionsScalarWhereWithAggregatesInput | CSSQuestionsScalarWhereWithAggregatesInput[]
    OR?: CSSQuestionsScalarWhereWithAggregatesInput[]
    NOT?: CSSQuestionsScalarWhereWithAggregatesInput | CSSQuestionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CSSQuestions"> | number
    question?: StringWithAggregatesFilter<"CSSQuestions"> | string
    option1?: StringWithAggregatesFilter<"CSSQuestions"> | string
    option2?: StringWithAggregatesFilter<"CSSQuestions"> | string
    option3?: StringWithAggregatesFilter<"CSSQuestions"> | string
    correct_answer?: StringWithAggregatesFilter<"CSSQuestions"> | string
  }

  export type JSQuestionsWhereInput = {
    AND?: JSQuestionsWhereInput | JSQuestionsWhereInput[]
    OR?: JSQuestionsWhereInput[]
    NOT?: JSQuestionsWhereInput | JSQuestionsWhereInput[]
    id?: IntFilter<"JSQuestions"> | number
    question?: StringFilter<"JSQuestions"> | string
    option1?: StringFilter<"JSQuestions"> | string
    option2?: StringFilter<"JSQuestions"> | string
    option3?: StringFilter<"JSQuestions"> | string
    correct_answer?: StringFilter<"JSQuestions"> | string
  }

  export type JSQuestionsOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type JSQuestionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JSQuestionsWhereInput | JSQuestionsWhereInput[]
    OR?: JSQuestionsWhereInput[]
    NOT?: JSQuestionsWhereInput | JSQuestionsWhereInput[]
    question?: StringFilter<"JSQuestions"> | string
    option1?: StringFilter<"JSQuestions"> | string
    option2?: StringFilter<"JSQuestions"> | string
    option3?: StringFilter<"JSQuestions"> | string
    correct_answer?: StringFilter<"JSQuestions"> | string
  }, "id">

  export type JSQuestionsOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
    _count?: JSQuestionsCountOrderByAggregateInput
    _avg?: JSQuestionsAvgOrderByAggregateInput
    _max?: JSQuestionsMaxOrderByAggregateInput
    _min?: JSQuestionsMinOrderByAggregateInput
    _sum?: JSQuestionsSumOrderByAggregateInput
  }

  export type JSQuestionsScalarWhereWithAggregatesInput = {
    AND?: JSQuestionsScalarWhereWithAggregatesInput | JSQuestionsScalarWhereWithAggregatesInput[]
    OR?: JSQuestionsScalarWhereWithAggregatesInput[]
    NOT?: JSQuestionsScalarWhereWithAggregatesInput | JSQuestionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JSQuestions"> | number
    question?: StringWithAggregatesFilter<"JSQuestions"> | string
    option1?: StringWithAggregatesFilter<"JSQuestions"> | string
    option2?: StringWithAggregatesFilter<"JSQuestions"> | string
    option3?: StringWithAggregatesFilter<"JSQuestions"> | string
    correct_answer?: StringWithAggregatesFilter<"JSQuestions"> | string
  }

  export type JavaQuestionsWhereInput = {
    AND?: JavaQuestionsWhereInput | JavaQuestionsWhereInput[]
    OR?: JavaQuestionsWhereInput[]
    NOT?: JavaQuestionsWhereInput | JavaQuestionsWhereInput[]
    id?: IntFilter<"JavaQuestions"> | number
    question?: StringFilter<"JavaQuestions"> | string
    option1?: StringFilter<"JavaQuestions"> | string
    option2?: StringFilter<"JavaQuestions"> | string
    option3?: StringFilter<"JavaQuestions"> | string
    correct_answer?: StringFilter<"JavaQuestions"> | string
  }

  export type JavaQuestionsOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type JavaQuestionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JavaQuestionsWhereInput | JavaQuestionsWhereInput[]
    OR?: JavaQuestionsWhereInput[]
    NOT?: JavaQuestionsWhereInput | JavaQuestionsWhereInput[]
    question?: StringFilter<"JavaQuestions"> | string
    option1?: StringFilter<"JavaQuestions"> | string
    option2?: StringFilter<"JavaQuestions"> | string
    option3?: StringFilter<"JavaQuestions"> | string
    correct_answer?: StringFilter<"JavaQuestions"> | string
  }, "id">

  export type JavaQuestionsOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
    _count?: JavaQuestionsCountOrderByAggregateInput
    _avg?: JavaQuestionsAvgOrderByAggregateInput
    _max?: JavaQuestionsMaxOrderByAggregateInput
    _min?: JavaQuestionsMinOrderByAggregateInput
    _sum?: JavaQuestionsSumOrderByAggregateInput
  }

  export type JavaQuestionsScalarWhereWithAggregatesInput = {
    AND?: JavaQuestionsScalarWhereWithAggregatesInput | JavaQuestionsScalarWhereWithAggregatesInput[]
    OR?: JavaQuestionsScalarWhereWithAggregatesInput[]
    NOT?: JavaQuestionsScalarWhereWithAggregatesInput | JavaQuestionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JavaQuestions"> | number
    question?: StringWithAggregatesFilter<"JavaQuestions"> | string
    option1?: StringWithAggregatesFilter<"JavaQuestions"> | string
    option2?: StringWithAggregatesFilter<"JavaQuestions"> | string
    option3?: StringWithAggregatesFilter<"JavaQuestions"> | string
    correct_answer?: StringWithAggregatesFilter<"JavaQuestions"> | string
  }

  export type PythonQuestionsWhereInput = {
    AND?: PythonQuestionsWhereInput | PythonQuestionsWhereInput[]
    OR?: PythonQuestionsWhereInput[]
    NOT?: PythonQuestionsWhereInput | PythonQuestionsWhereInput[]
    id?: IntFilter<"PythonQuestions"> | number
    question?: StringFilter<"PythonQuestions"> | string
    option1?: StringFilter<"PythonQuestions"> | string
    option2?: StringFilter<"PythonQuestions"> | string
    option3?: StringFilter<"PythonQuestions"> | string
    correct_answer?: StringFilter<"PythonQuestions"> | string
  }

  export type PythonQuestionsOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type PythonQuestionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PythonQuestionsWhereInput | PythonQuestionsWhereInput[]
    OR?: PythonQuestionsWhereInput[]
    NOT?: PythonQuestionsWhereInput | PythonQuestionsWhereInput[]
    question?: StringFilter<"PythonQuestions"> | string
    option1?: StringFilter<"PythonQuestions"> | string
    option2?: StringFilter<"PythonQuestions"> | string
    option3?: StringFilter<"PythonQuestions"> | string
    correct_answer?: StringFilter<"PythonQuestions"> | string
  }, "id">

  export type PythonQuestionsOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
    _count?: PythonQuestionsCountOrderByAggregateInput
    _avg?: PythonQuestionsAvgOrderByAggregateInput
    _max?: PythonQuestionsMaxOrderByAggregateInput
    _min?: PythonQuestionsMinOrderByAggregateInput
    _sum?: PythonQuestionsSumOrderByAggregateInput
  }

  export type PythonQuestionsScalarWhereWithAggregatesInput = {
    AND?: PythonQuestionsScalarWhereWithAggregatesInput | PythonQuestionsScalarWhereWithAggregatesInput[]
    OR?: PythonQuestionsScalarWhereWithAggregatesInput[]
    NOT?: PythonQuestionsScalarWhereWithAggregatesInput | PythonQuestionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PythonQuestions"> | number
    question?: StringWithAggregatesFilter<"PythonQuestions"> | string
    option1?: StringWithAggregatesFilter<"PythonQuestions"> | string
    option2?: StringWithAggregatesFilter<"PythonQuestions"> | string
    option3?: StringWithAggregatesFilter<"PythonQuestions"> | string
    correct_answer?: StringWithAggregatesFilter<"PythonQuestions"> | string
  }

  export type UserCreateInput = {
    email: string
    password: string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type HTMLQuestionsCreateInput = {
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type HTMLQuestionsUncheckedCreateInput = {
    id?: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type HTMLQuestionsUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type HTMLQuestionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type HTMLQuestionsCreateManyInput = {
    id?: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type HTMLQuestionsUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type HTMLQuestionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type CSSQuestionsCreateInput = {
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type CSSQuestionsUncheckedCreateInput = {
    id?: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type CSSQuestionsUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type CSSQuestionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type CSSQuestionsCreateManyInput = {
    id?: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type CSSQuestionsUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type CSSQuestionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type JSQuestionsCreateInput = {
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type JSQuestionsUncheckedCreateInput = {
    id?: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type JSQuestionsUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type JSQuestionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type JSQuestionsCreateManyInput = {
    id?: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type JSQuestionsUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type JSQuestionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type JavaQuestionsCreateInput = {
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type JavaQuestionsUncheckedCreateInput = {
    id?: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type JavaQuestionsUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type JavaQuestionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type JavaQuestionsCreateManyInput = {
    id?: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type JavaQuestionsUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type JavaQuestionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type PythonQuestionsCreateInput = {
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type PythonQuestionsUncheckedCreateInput = {
    id?: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type PythonQuestionsUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type PythonQuestionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type PythonQuestionsCreateManyInput = {
    id?: number
    question: string
    option1: string
    option2: string
    option3: string
    correct_answer: string
  }

  export type PythonQuestionsUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type PythonQuestionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    option1?: StringFieldUpdateOperationsInput | string
    option2?: StringFieldUpdateOperationsInput | string
    option3?: StringFieldUpdateOperationsInput | string
    correct_answer?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type HTMLQuestionsCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type HTMLQuestionsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HTMLQuestionsMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type HTMLQuestionsMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type HTMLQuestionsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CSSQuestionsCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type CSSQuestionsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CSSQuestionsMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type CSSQuestionsMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type CSSQuestionsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type JSQuestionsCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type JSQuestionsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type JSQuestionsMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type JSQuestionsMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type JSQuestionsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type JavaQuestionsCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type JavaQuestionsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type JavaQuestionsMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type JavaQuestionsMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type JavaQuestionsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PythonQuestionsCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type PythonQuestionsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PythonQuestionsMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type PythonQuestionsMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    option1?: SortOrder
    option2?: SortOrder
    option3?: SortOrder
    correct_answer?: SortOrder
  }

  export type PythonQuestionsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HTMLQuestionsDefaultArgs instead
     */
    export type HTMLQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HTMLQuestionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CSSQuestionsDefaultArgs instead
     */
    export type CSSQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CSSQuestionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JSQuestionsDefaultArgs instead
     */
    export type JSQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JSQuestionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JavaQuestionsDefaultArgs instead
     */
    export type JavaQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JavaQuestionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PythonQuestionsDefaultArgs instead
     */
    export type PythonQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PythonQuestionsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}